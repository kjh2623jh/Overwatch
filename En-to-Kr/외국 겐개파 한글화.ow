variables
{
	global:
		0: CheckpointDefaultRadius
		1: AllowContinueslyOpenUp
		2: LastCheckpointPlayerNum
		3: PioneerOpenUpTimeLimit
		4: Debug
		5: I
		6: Pioneer
		7: GameState
		8: CheckpointsPosition
		9: CheckpointsAbility1Enabled
		10: CheckpointsUltimateEnabled
		11: CheckpointsCreator
		12: CheckpointsCreatorText
		13: TempNextCheckpointPosition
		14: PioneerInteractState
		15: T
		16: PioneerAbility1Used
		17: PioneerUltimateUsed
		18: TargetPlayer
		19: TargetCheckpointNum
		20: OwnerPrivilege
		21: OwnerPrivilegeHUD
		22: OwnerSaveGameTipsHUD
		23: LastPioneer
		24: PioneerOpenUpTimeUsed
		25: ChasingOpenUpTime
		26: PlayersNameRecords
		27: PlayersMaxCheckpointRecords
		28: EnableTimer
		29: PioneerModeShortcut
		30: TimerModeShortcut
		31: ShowShortcutPlayers
		32: OwnerPrivilegeText
		33: PlayersRecord
		34: BugBhop
		35: EmoteBhop
		36: BugClimb
		37: TripleJump
		38: Top5
		39: Top5Color
		40: CleanEnvItems
		41: ToolMan
		42: ObjectivePosition
		43: CheckpointsAutoTeleport
		44: CheckpointsPreview
		45: NextCheckpointPosition
		46: TempArray

	player:
		0: CurrentCheckpointNum
		1: FreeMode
		2: SpectatorMode
		3: PreviousPosition
		4: MaxCheckpointNum
		5: JumpingCheckpoint
		6: JumpingCheckpointHUD
		7: NextCheckpointsPreview
		8: Invisible
		9: SelfKill
		10: Ability1Used
		11: UltimateUsed
		12: TempVar
		13: Timer
		14: BestRecord
		15: TimerPaused
		16: TimerPausedCheckpointNum
		17: StartForceInvisible
		18: StartForceInvisibleEffect
		19: ForceInvisiblePlayer
		20: ShowPlayerInfo
		21: PlayerInfoHUD
		22: RankSort
		23: Climb
		24: Bhop
		25: Jump
		26: BugJump
}

subroutines
{
	0: ToNextCheckpoint
	1: ToCurrentCheckpoint
	2: EnableAllAbilities
	3: SetCheckpointAbilities
	4: ResetPioneerState
	5: CancelOpenUp
	6: AutoSaveProgress
	7: StopAndClearTimer
	8: CancelAbilityAndMomentum
}

rule("关卡存放于此规则, 动作列表如果有东西请先删干净, 建议在【自己创建的】房间操作, 否则看不到开拓者名字")
{
	event
	{
		Ongoing - Global;
	}
}

rule("全局初始化")
{
	event
	{
		Ongoing - Global;
	}

	action
	{
		"关卡 9JBFS"
		Global.CheckpointsPosition = Global.CheckpointsPosition == 0 ? Empty Array : Global.CheckpointsPosition;
		Global.CheckpointsAbility1Enabled = Global.CheckpointsAbility1Enabled == 0 ? Empty Array : Global.CheckpointsAbility1Enabled;
		Global.CheckpointsUltimateEnabled = Global.CheckpointsUltimateEnabled == 0 ? Empty Array : Global.CheckpointsUltimateEnabled;
		Global.CheckpointsCreator = Global.CheckpointsCreator == 0 ? Empty Array : Global.CheckpointsCreator;
		Global.CheckpointsCreatorText = Global.CheckpointsCreatorText == 0 ? Empty Array : Global.CheckpointsCreatorText;
		Global.CheckpointsAutoTeleport = Global.CheckpointsAutoTeleport == 0 ? Empty Array : Global.CheckpointsAutoTeleport;
		Global.CheckpointsPreview = Global.CheckpointsPreview == 0 ? Empty Array : Global.CheckpointsPreview;
		"设置"
		Global.EnableTimer = !Global.EnableTimer ? Workshop Setting Combo(Custom String("pioneer"), Custom String("game mode"), 0, Array(
			Custom String("pioneer mode"), Custom String("nomal mode")), 0) : Global.EnableTimer;
		Global.AllowContinueslyOpenUp = Global.AllowContinueslyOpenUp == 0 ? Workshop Setting Toggle(Custom String("pioneer"),
			Custom String("continuous pioneer"), True, 3) : Global.AllowContinueslyOpenUp;
		Global.PioneerOpenUpTimeLimit = Global.PioneerOpenUpTimeLimit == 0 ? Workshop Setting Integer(Custom String("pioneer"),
			Custom String("pioneer time limit"), 300, 60, 600, 6) : Global.PioneerOpenUpTimeLimit;
		Global.CheckpointDefaultRadius = Global.CheckpointDefaultRadius == 0 ? Workshop Setting Real(Custom String("pioneer"),
			Custom String("default level halo radius"), 1, 0.500, 5, 5) : Global.CheckpointDefaultRadius;
		Global.LastCheckpointPlayerNum = Global.LastCheckpointPlayerNum == 0 ? Workshop Setting Integer(Custom String("pioneer"),
			Custom String("number of players required for countdown"), 2, 1, 12, 6) : Global.LastCheckpointPlayerNum;
		Global.CleanEnvItems = Global.CleanEnvItems == 0 ? Workshop Setting Toggle(Custom String("pioneer"), Custom String("summon D.VA"),
			True, 7) : Global.CleanEnvItems;
		Global.BugBhop = Global.BugBhop == 0 ? Workshop Setting Toggle(Custom String("Mechanics"), Custom String("Create bhop"), False, 0)
			: Global.BugBhop;
		Global.EmoteBhop = Global.EmoteBhop == 0 ? Workshop Setting Toggle(Custom String("Mechanics"), Custom String("Emote"), False, 1)
			: Global.EmoteBhop;
		Global.BugClimb = Global.BugClimb == 0 ? Workshop Setting Toggle(Custom String("Mechanics"), Custom String("Multiclimb"), False, 2)
			: Global.BugClimb;
		Global.TripleJump = Global.TripleJump == 0 ? Workshop Setting Toggle(Custom String("Mechanics"), Custom String("Tripple jump"),
			False, 3) : Global.TripleJump;
		Global.Debug = Workshop Setting Toggle(Custom String("debug(don't change)"), Custom String("Debug"), False, 0);
		"常量"
		Global.PioneerModeShortcut = Custom String(
			"Preview | LMB+RMB\nSpectate | F+E\nquick reset | R\nInvincible | R+V　\njump to next/prev | F+jump/crouch\n{0}", Custom String(
			"quick jump | Hold V\nRestart | F+crouch+E\nInivisble | group up　\ngive up pioneering | Hold LMB+RMB"));
		Global.TimerModeShortcut = Custom String(
			"Preview | LMB+RMB\nSpectate | F+E\nquick reset | R\nInvincible | R+V　\njump to next/prev | F+jump/crouch\n{0}", Custom String(
			"quick jump | Hold V\nRestart | F+crouch+E\nInivisble | group up　\npause/resume timing | need healing"));
		Global.OwnerPrivilegeText = Custom String(
			"delete last level | hold CTRL+SHIFT+D\nJump any player | Aim at the target and hold R\nsave all levels | F+thanks,see hint");
		Global.Top5Color = Array(Custom Color(255, 215, 0, 255), Custom Color(220, 223, 227, 255), Custom Color(191, 173, 111, 255),
			Custom Color(192, 192, 192, 255), Custom Color(128, 138, 135, 255));
		"游戏全局变量"
		Global.Pioneer = 0;
		Global.GameState = Global.GameState == 0 ? 0 : Global.GameState;
		Global.TempNextCheckpointPosition = 0;
		Global.PioneerInteractState = 0;
		Global.PioneerAbility1Used = 0;
		Global.PioneerUltimateUsed = 0;
		Global.TargetPlayer = 0;
		Global.TargetCheckpointNum = 0;
		Global.OwnerPrivilege = 0;
		Global.OwnerPrivilegeHUD = 0;
		Global.LastPioneer = 0;
		Global.PioneerOpenUpTimeUsed = 0;
		Global.ChasingOpenUpTime = 0;
		Global.PlayersNameRecords = Empty Array;
		Global.PlayersMaxCheckpointRecords = Empty Array;
		Global.ShowShortcutPlayers = Empty Array;
		Global.PlayersRecord = Empty Array;
		Global.Top5 = Empty Array;
		Global.TempArray[11] = Null;
		Disable Built-In Game Mode Completion;
		Disable Built-In Game Mode Announcer;
		Disable Built-In Game Mode Music;
		Disable Built-In Game Mode Scoring;
		If(!Global.Debug);
			Disable Inspector Recording;
		End;
		"开拓者下一关临时光圈"
		Create Effect(Global.TempNextCheckpointPosition ? All Players(All Teams) : Null, Ring, Color(Purple),
			Global.TempNextCheckpointPosition, Global.CheckpointDefaultRadius, Visible To Position and Radius);
		"基本信息"
		Create HUD Text(All Players(All Teams), Ability Icon String(Hero(레킹볼), Button(Crouch)), Custom String("Translated by: FATHER"),
			Custom String("code: XRRR0                                     "), Right, -1 * 999, Custom Color(255, 255, 255, 150),
			Custom Color(255, 0, 0, 100), Custom Color(255, 255, 255, 150), Visible To, Default Visibility);
		Create HUD Text(All Players(All Teams), Ability Icon String(Hero(에코), Button(Ultimate)), Custom String("editor creator：昭华#51234"),
			Custom String("modified by: 明天又是新的一天"), Right, -1 * 998, Custom Color(255, 255, 255, 150), Custom Color(247, 163, 6, 150),
			Custom Color(255, 255, 255, 150), Visible To, Default Visibility);
		"展开快捷键提示"
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} double click Interact({1}) to view hotkey",
			Ability Icon String(Hero(토르비욘), Button(Ability 2)), Input Binding String(Button(Interact))), Right, 1, Null, Null,
			Custom Color(220, 220, 220, 200), Visible To and String, Default Visibility);
		Create HUD Text(Global.ShowShortcutPlayers, Null, Null, !Global.EnableTimer ? Custom String("{0}{1}", Global.PioneerModeShortcut,
			Global.Pioneer == Local Player && Current Game Mode == Game Mode(쟁탈) ? Custom String("\n teleport to other maps | F+spray")
			: Custom String("")) : Global.TimerModeShortcut, Right, 2, Null, Null, Custom Color(220, 220, 220, 200), Visible To and String,
			Default Visibility);
		"房间关键设置显示"
		Create HUD Text(All Players(All Teams), Ability Icon String(Hero(겐지), Button(Primary Fire)), Custom String(
			"{0} room settings:  \n --{1} {2}", Ability Icon String(Hero(바스티온), Button(Secondary Fire)), Ability Icon String(Hero(루시우),
			Button(Ability 2)), Custom String("{0}\n --{1} Mechanics:{2}", Global.EnableTimer ? Custom String("game mode:nomal mode")
			: Custom String("time limit:{0} sec", Global.PioneerOpenUpTimeLimit), Ability Icon String(Hero(한조), Button(Jump)),
			!Global.BugBhop && !Global.EmoteBhop && !Global.BugClimb && !Global.TripleJump ? Custom String("All disabled") : Custom String(
			"{0}{1}{2}", Global.BugBhop ? Custom String("create ") : Custom String(""), Global.EmoteBhop ? Custom String("emote ")
			: Custom String(""), Custom String("{0}{1}", Global.BugClimb ? Custom String("Multi ") : Custom String(""),
			Global.TripleJump ? Custom String("tripple ") : Custom String(""))))), Custom String("pioneer parkour {0}", Custom String(
			"1.5.1")), Left, -1 * 999, Custom Color(255, 255, 255, 50), Custom Color(255, 255, 255, 150), Color(Orange),
			Visible To and Color, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("　"), Left, -1 * 998, Null, Null, Null, Visible To,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("　"), Top, 1, Null, Null, Null, Visible To, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("　"), Right, 0, Null, Null, Null, Visible To,
			Default Visibility);
		If(!Global.EnableTimer);
			"房主权限显示"
			Create HUD Text(Array Contains(Global.ShowShortcutPlayers, Host Player) ? Host Player : Null, Null, Null,
				Global.OwnerPrivilegeText, Right, 3, Null, Null, Color(Orange), Visible To, Default Visibility);
			"开拓者已用技能次数显示"
			Create HUD Text(Global.Pioneer, Null, Null, Custom String("{0} {1} - {2}", Ability Icon String(Hero(겐지), Button(Ability 1)),
				Global.PioneerAbility1Used, Custom String("{0} {1}", Ability Icon String(Hero(겐지), Button(Ultimate)),
				Global.PioneerUltimateUsed)), Top, 2, Null, Null, Color(Sky Blue), Visible To Sort Order String, Default Visibility);
			"当前开拓者剩余时间"
			Create Progress Bar HUD Text(All Players(All Teams), 100 * ((Global.PioneerOpenUpTimeLimit - Global.PioneerOpenUpTimeUsed)
				/ Global.PioneerOpenUpTimeLimit), Array(Custom String(""), Custom String("Waiting for the initial pioneer"), Custom String(
				"{0} [{1}] is pioneering{2}", Hero Icon String(Hero(겐지)), Global.Pioneer, Global.PioneerOpenUpTimeUsed > 0 ? Custom String(
				",time left:{0} sec", Round To Integer(Global.PioneerOpenUpTimeLimit - Global.PioneerOpenUpTimeUsed, Up)) : Custom String("")),
				Custom String("No pioneer currently"))[Global.GameState], Top, 0, Global.GameState == 2 ? Custom Color(
				60 + Global.PioneerOpenUpTimeUsed / Global.PioneerOpenUpTimeLimit * (255 - 60),
				255 - Global.PioneerOpenUpTimeUsed / Global.PioneerOpenUpTimeLimit * (255 - 60), 37, 180) : Color(White), Custom Color(255,
				255, 255, 150), Visible To Values and Color, Default Visibility);
		Else If(Global.EnableTimer);
			Create HUD Text(All Players(All Teams), Null, Null, Custom String(" {0} players have completed{1}\r\n", Count Of(
				Global.PlayersRecord), Count Of(Global.PlayersRecord) > 0 ? Custom String(",fastest record holder [{0}],use time:{1}sec",
				Global.PlayersRecord[0][0], Global.PlayersRecord[0][1]) : Custom String("")), Left, -1 * 996, Null, Null, Custom Color(138,
				172, 217, 200), Visible To and String, Default Visibility);
			"Top5"
			Create HUD Text(Global.Top5 ? All Players(All Teams) : Null, Null, Null, Custom String("Today`s Top {0}", Count Of(Global.Top5)),
				Left, -1 * 995, Null, Null, Color(Green), Visible To and String, Default Visibility);
			For Global Variable(I, 0, 5, 1);
				Create HUD Text(Global.Top5[Evaluate Once(Global.I)] ? All Players(All Teams) : Null, Hero Icon String(Hero(겐지)), Custom String(
					"{0} [{1}]", Array(Custom String("1st"), Custom String("2nd"), Custom String("3rd"), Custom String("4th"), Custom String(
					"5th"))[Evaluate Once(Global.I)], Global.Top5[Evaluate Once(Global.I)][0]), Custom String("{0} sec", Global.Top5[Evaluate Once(
					Global.I)][1]), Left, -1 * 994 + Global.I, Global.Top5Color[Global.I], Global.Top5Color[Global.I], Global.Top5Color[Global.I],
					Visible To and String, Default Visibility);
			End;
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("　"), Left, -1 * 989, Null, Null, Null, Visible To,
				Default Visibility);
			"HighLights"
			Create HUD Text(Is True For Any(All Players(All Teams), Current Array Element.BestRecord < 16200 && Index Of Array Value(
				Global.Top5, Custom String("{0}", Current Array Element)) < 0) ? All Players(All Teams) : Null, Null, Null, Custom String(
				"HighLights"), Left, -1 * 988, Null, Null, Color(White), Visible To, Default Visibility);
		End;
		"夺旗模式必须手动点击开始游戏模式"
		If(Current Game Mode == Game Mode(깃발 뺏기));
			While(!Has Spawned(Host Player));
				Wait(1, Ignore Condition);
			End;
			Start Game Mode;
			Wait(30, Ignore Condition);
		End;
		"当前模式不是突击模式的时候，需要等待游戏第一阶段自行完成"
		If(Current Game Mode != Game Mode(연습 전투));
			Wait(Match Time, Ignore Condition);
		End;
		"本局游戏剩余时间倒计时显示 (0,255,160) - (255,50,160)"
		Create HUD Text(All Players(All Teams), Null, Custom String("time left until server resets: {0} min {1} sec {2}",
			Round To Integer((15600 - Total Time Elapsed) / 60, Down), 60 - Round To Integer(Total Time Elapsed % 60, Up), Custom String(
			"\n\n\n")), Null, Left, -1 * 997, Null, Custom Color(255 * (Total Time Elapsed / 15600),
			255 - Total Time Elapsed / 15600 * 255, 255 - Total Time Elapsed / 15600 * 255, 150), Null, Visible To String and Color,
			Default Visibility);
		Pause Match Time;
	}
}

rule("清理地图可破坏物")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.CleanEnvItems == True;
		Array Contains(Array(Game Mode(쟁탈), Game Mode(팀 데스매치)), Current Game Mode) == False;
	}

	action
	{
		Wait(5, Ignore Condition);
		Create Dummy Bot(Hero(D.Va), Team 1, 11, Nearest Walkable Position(Vector(0, 0, 0)), Null);
		Global.ToolMan = Players In Slot(11, Team 1);
		Wait(1, Ignore Condition);
		Set Gravity(Global.ToolMan, 0);
		Wait(1, Ignore Condition);
		Teleport(Global.ToolMan, Position Of(Spawn Points(Team 1))[0] + Direction Towards(Position Of(Spawn Points(Team 1))[0],
			Position Of(Spawn Points(Team 2))[0]) * (Distance Between(Position Of(Spawn Points(Team 1))[0], Position Of(Spawn Points(
			Team 2))[0]) / 2) + Up * 50);
		Wait(1, Ignore Condition);
		Start Scaling Player(Global.ToolMan, 20, False);
		Wait(1, Ignore Condition);
		Set Ultimate Charge(Global.ToolMan, 100);
		Wait(1, Ignore Condition);
		Press Button(Global.ToolMan, Button(Ultimate));
		Wait(5, Ignore Condition);
		Destroy Dummy Bot(Team 1, 11);
		Global.ToolMan = Null;
	}
}

rule("玩家初始化")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	action
	{
		Event Player.TimerPausedCheckpointNum = -1 * 1;
		Disable Game Mode HUD(Event Player);
		Disable Game Mode In-World UI(Event Player);
		Disable Nameplates(All Players(All Teams), All Players(All Teams));
		Enable Death Spectate All Players(Event Player);
		Enable Death Spectate Target HUD(Event Player);
		If(Global.EnableTimer);
			Event Player.MaxCheckpointNum = Count Of(Global.CheckpointsPosition) - 1;
			Event Player.BestRecord = 16200;
		End;
		If(Global.GameState == 1);
			Event Player.FreeMode = True;
		End;
		Wait(Random Real(1, 2), Ignore Condition);
		"爬墙已用"
		Create Effect(Event Player.Climb == 0 ? All Players(All Teams) : Null, Ana Nano Boosted Effect, Color(Red), Event Player, 1,
			Visible To Position and Radius);
		If(!Global.EnableTimer);
			"名字显示"
			Create In-World Text(All Players(All Teams), Custom String("{0}{1}", Event Player, Global.EnableTimer ? Custom String(" - {0}",
				Event Player.CurrentCheckpointNum) : Custom String("")), Event Player, 1, Do Not Clip, Visible To Position and Color,
				Event Player != Global.Pioneer ? Custom Color(255, 255, 255, 130) : Custom Color(79, 193, 255, 130), Default Visibility);
			"中间关卡进度"
			Create HUD Text(Global.GameState != 1 ? Event Player : Null, Null, Null, Custom String("{0} / {1}",
				Event Player.CurrentCheckpointNum, Count Of(Global.CheckpointsPosition) - 1 > 0 ? Count Of(Global.CheckpointsPosition)
				- 1 : 0), Top, 4, Null, Null, Custom Color(255, 255, 255, 200), Visible To and String, Default Visibility);
			"左边排行进度"
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}: {1}", Event Player, Event Player.MaxCheckpointNum), Left,
				0 - Event Player.MaxCheckpointNum + Event Player.RankSort, Null, Null, Custom Color(138, 172, 217, 200),
				Visible To Sort Order String, Default Visibility);
		Else If(Global.EnableTimer);
			"名字显示"
			Create In-World Text(All Players(All Teams), Custom String("{0}{1}", Event Player, Global.EnableTimer ? Custom String(" - {0}",
				Event Player.CurrentCheckpointNum) : Custom String("")), Event Player, 1, Do Not Clip, Visible To Position String and Color,
				Event Player.BestRecord < 16200 ? Color(Orange) : Custom Color(255, 255, 255, 150), Default Visibility);
			"左边排行进度"
			Create HUD Text(Index Of Array Value(Global.Top5, Custom String("{0}", Event Player))
				< 0 && Event Player.BestRecord < 16200 ? All Players(All Teams) : Null, Hero Icon String(Hero(겐지)), Custom String("[{0}] ",
				Event Player), Custom String("{0} sec", Event Player.BestRecord), Left, Event Player.BestRecord / 100, Custom Color(158, 255,
				187, 255), Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187, 255), Visible To Sort Order String,
				Default Visibility);
			"中间关卡进度"
			Create HUD Text(Event Player, Null, Null, Custom String("{0} / {1}", Event Player.CurrentCheckpointNum, Count Of(
				Global.CheckpointsPosition) - 1), Top, 4, Null, Null, Custom Color(255, 255, 255, 200), Visible To and String,
				Default Visibility);
			"中间计时器"
			Create HUD Text(Event Player.Timer > 0 ? Event Player : Null, Null, Null, Custom String("{0}", Event Player.Timer), Top, 5, Null,
				Null, Custom Color(255, 255, 255, 200), Visible To and String, Default Visibility);
		End;
		"当前关卡的光圈"
		Create Effect(Global.CheckpointsPosition[Event Player.CurrentCheckpointNum] != 0 ? Event Player : Null, Ring, Color(Blue),
			Global.CheckpointsPosition[Event Player.CurrentCheckpointNum], Global.CheckpointDefaultRadius, Visible To Position and Radius);
		"下一关光圈"
		Create Effect(Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1] != 0 ? Event Player : Null, Ring,
			!Global.CheckpointsAutoTeleport[Event Player.CurrentCheckpointNum + 1] ? Color(Blue) : Color(Red),
			Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1], Global.CheckpointDefaultRadius,
			Visible To Position Radius and Color);
		Create Effect(Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1] != 0 ? Event Player : Null, Ring,
			!Global.CheckpointsAutoTeleport[Event Player.CurrentCheckpointNum + 1] ? Color(Sky Blue) : Color(Red),
			Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1], Global.CheckpointDefaultRadius,
			Visible To Position Radius and Color);
		"下一关光柱"
		Create Effect(Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1] != 0 ? Event Player : Null, Sparkles,
			!Global.CheckpointsAutoTeleport[Event Player.CurrentCheckpointNum + 1] ? Color(Sky Blue) : Color(Orange),
			Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1], Global.CheckpointDefaultRadius,
			Visible To Position Radius and Color);
		"下一关图标"
		Create Icon(Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1] != 0 ? Event Player : Null,
			Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1] + Vector(0, 2, 0), Flag, Visible To and Position, Color(
			Orange), True);
		"下一关文本"
		Create In-World Text(Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1] != 0 ? Event Player : Null, Custom String(
			"level {0} ,created by [{1}]", Event Player.CurrentCheckpointNum + 1,
			Global.CheckpointsCreatorText[Event Player.CurrentCheckpointNum]),
			Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1], 1.400, Do Not Clip, Visible To Position and String,
			Custom Color(255, 255, 255, 200), Default Visibility);
		"技能可用剩余次数显示"
		Create HUD Text(Event Player == Global.Pioneer ? Null : Event Player, Null, Null, Custom String("{0} {1} - {2}",
			Ability Icon String(Hero(겐지), Button(Ability 1)), Max(0,
			Global.CheckpointsAbility1Enabled[Event Player.CurrentCheckpointNum] - Event Player.Ability1Used), Custom String("{0} {1}",
			Ability Icon String(Hero(겐지), Button(Ultimate)), Max(0,
			Global.CheckpointsUltimateEnabled[Event Player.CurrentCheckpointNum] - Event Player.UltimateUsed))), Top, 2, Null, Null,
			Custom Color(255, 255, 255, 200), Visible To Sort Order String, Default Visibility);
		"显身提示"
		Create HUD Text(Event Player.Invisible ? 0 : Event Player, Icon String(Warning), Custom String("hint: "), Custom String("visible"),
			Left, -1 * 995, Color(Red), Color(Red), Custom Color(255, 255, 255, 150), Visible To, Default Visibility);
	}
}

rule("出生后隐身")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Has Spawned(Event Player) == True;
	}

	action
	{
		Event Player.Invisible = True;
		Set Invisible(Event Player, All);
	}
}

rule("玩家数据展示")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Is Button Held(Event Player, Button(Jump)) == True;
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	action
	{
		Wait(5, Abort When False);
		Event Player.ShowPlayerInfo = !Event Player.ShowPlayerInfo;
		If(Event Player.ShowPlayerInfo);
			Create HUD Text(Event Player.ShowPlayerInfo ? Event Player : Null, Null, Null, Custom String(
				" \nlocation:{0}　\nhorizontal speed:{1}\nvertical speed:{2}", Position Of(Event Player), Horizontal Speed Of(Event Player),
				Custom String("{0}\noverall speed:{1}\nheight:{2}", Vertical Speed Of(Event Player), Speed Of(Event Player), Custom String(
				"{0}\njumping:{1}\non the ground:{2}", Altitude Of(Event Player), Is Jumping(Event Player), Custom String(
				"{0}\nis moving:{1}\n{2}", Is On Ground(Event Player), Is Moving(Event Player), Custom String("dash:{0} - {1}", Is Button Held(
				Event Player, Button(Ability 1)), Custom String("{0}\nultimate:{1}", Is Using Ability 1(Event Player), Custom String(
				"{0} - {1}", Is Button Held(Event Player, Button(Ultimate)), Is Using Ultimate(Event Player)))))))), Right, 4, Null, Null,
				Color(White), Visible To and String, Visible Never);
			Event Player.PlayerInfoHUD = Last Text ID;
		Else;
			Destroy HUD Text(Event Player.PlayerInfoHUD);
		End;
	}
}

rule("当没有开拓者也没有关卡的时候")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.Pioneer == Null;
		Count Of(Global.CheckpointsPosition) == 0;
	}

	action
	{
		Global.GameState = 1;
	}
}

rule("结束游戏并自动重启")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Total Time Elapsed >= 15600;
	}

	action
	{
		Declare Team Victory(Team 1);
		Wait(3, Ignore Condition);
		Restart Match;
	}
}

rule("按下互动+R成为开拓者")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Global.EnableTimer == False;
		Global.GameState == 1;
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Button(Reload)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	action
	{
		If(Is In Air(Event Player));
			Small Message(Event Player, Custom String("Please land on the ground and try again"));
			Abort;
		End;
		Global.Pioneer = Event Player;
		Global.CheckpointsPosition[0] = Position Of(Global.Pioneer);
		All Players(All Teams).CurrentCheckpointNum = 0;
		Global.GameState = 2;
	}
}

rule("开拓者开始开拓")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Event Player == Global.Pioneer;
		Is Alive(Event Player) == True;
		Global.GameState == 2;
		Global.TempNextCheckpointPosition == False;
		Is On Ground(Event Player) == True;
		Distance Between(Event Player, Global.CheckpointsPosition[Event Player.CurrentCheckpointNum])
			> Global.CheckpointDefaultRadius + 0.400;
	}

	action
	{
		If(Distance Between(Event Player, Global.CheckpointsPosition[Event Player.CurrentCheckpointNum]) <= (
			Global.CheckpointDefaultRadius + 0.400) * 2);
			Call Subroutine(ToCurrentCheckpoint);
			Call Subroutine(CancelOpenUp);
			Abort;
		End;
		If(Event Player.SelfKill);
			Abort;
		End;
		Global.TempNextCheckpointPosition = Position Of(Event Player);
		Play Effect(Global.Pioneer, Buff Impact Sound, Color(White), Global.Pioneer, 100);
		Set Ability 1 Enabled(Global.Pioneer, True);
		Set Ultimate Ability Enabled(Event Player, True);
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("开拓出下一关时提示确认与否")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.GameState == 2;
		Global.TempNextCheckpointPosition != False;
	}

	action
	{
		Small Message(Global.Pioneer, Custom String("press {0} to cancel,Hold {1} to confirm", Input Binding String(Button(Interact)),
			Input Binding String(Button(Interact))));
		Wait(3, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("取消开拓")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Event Player == Global.Pioneer;
		Is Alive(Event Player) == True;
		Global.GameState == 2;
		Global.TempNextCheckpointPosition != False;
		Is Button Held(Event Player, Button(Interact)) == False;
		Global.PioneerInteractState == 4;
	}

	action
	{
		If(Is Using Ultimate(Event Player));
			Kill(Event Player, Null);
			Abort;
		End;
		Call Subroutine(ToCurrentCheckpoint);
		Call Subroutine(CancelOpenUp);
	}
}

rule("Subroutine CancelOpenUp")
{
	event
	{
		Subroutine;
		CancelOpenUp;
	}

	action
	{
		Call Subroutine(CancelAbilityAndMomentum);
		Call Subroutine(ResetPioneerState);
		Call Subroutine(EnableAllAbilities);
	}
}

rule("Subroutine ResetPioneerState")
{
	event
	{
		Subroutine;
		ResetPioneerState;
	}

	action
	{
		Global.PioneerInteractState = Null;
		Global.TempNextCheckpointPosition = Null;
		Global.PioneerAbility1Used = 0;
		Global.PioneerUltimateUsed = 0;
	}
}

rule("确认开拓")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.GameState == 2;
		Is Alive(Global.Pioneer) == True;
		Global.TempNextCheckpointPosition != False;
		Is Button Held(Global.Pioneer, Button(Interact)) == True;
	}

	action
	{
		Global.PioneerInteractState = 4;
		Wait(1, Abort When False);
		Global.T = Mapped Array(Filtered Array(All Players(All Teams), Current Array Element.CurrentCheckpointNum + 1 == Count Of(
			Global.CheckpointsPosition)), Current Array Element);
		Teleport(Global.T, Global.CheckpointsPosition[Global.Pioneer.CurrentCheckpointNum]);
		Global.T.FreeMode = False;
		Kill(Global.T, Null);
		Modify Global Variable(CheckpointsPosition, Append To Array, Global.TempNextCheckpointPosition);
		Modify Global Variable(CheckpointsAbility1Enabled, Append To Array, Global.PioneerAbility1Used);
		Modify Global Variable(CheckpointsUltimateEnabled, Append To Array, Global.PioneerUltimateUsed);
		Modify Global Variable(CheckpointsCreatorText, Append To Array, Custom String("{0}", Global.Pioneer));
		Modify Global Variable(CheckpointsCreator, Append To Array, Global.Pioneer);
		Modify Global Variable(CheckpointsAutoTeleport, Append To Array, Current Game Mode == Game Mode(쟁탈) && (Distance Between(
			Global.CheckpointsPosition[Global.Pioneer.CurrentCheckpointNum], Global.TempNextCheckpointPosition) > 250 || Absolute Value(
			Y Component Of(Global.CheckpointsPosition[Global.Pioneer.CurrentCheckpointNum] - Global.TempNextCheckpointPosition)) > 30)
			? True : False);
		Set Ability 1 Enabled(Global.T, Global.CheckpointsAbility1Enabled[Global.Pioneer.CurrentCheckpointNum] > 0);
		Set Ultimate Ability Enabled(Global.T, Global.CheckpointsUltimateEnabled[Global.Pioneer.CurrentCheckpointNum] > 0);
		Set Ultimate Charge(Global.T, 100);
		Global.T.Ability1Used = 0;
		Global.T.UltimateUsed = 0;
		Wait(0.016, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("new level has been created！"));
		Wait(0.016, Ignore Condition);
		Global.GameState = 3;
		Call Subroutine(ResetPioneerState);
		Global.Pioneer = Null;
		Stop Chasing Global Variable(PioneerOpenUpTimeUsed);
		Global.PioneerOpenUpTimeUsed = 0;
		Global.ChasingOpenUpTime = False;
	}
}

rule("出现新的开拓者")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.Pioneer != Null;
	}

	action
	{
		Wait(0.016, Ignore Condition);
		If(Current Game Mode == Game Mode(쟁탈));
			Global.ObjectivePosition = First Of(Sorted Array(Array(Array(0, Distance Between(
				Global.CheckpointsPosition[Global.Pioneer.CurrentCheckpointNum], Objective Position(0))), Array(1, Distance Between(
				Global.CheckpointsPosition[Global.Pioneer.CurrentCheckpointNum], Objective Position(1))), Array(2, Distance Between(
				Global.CheckpointsPosition[Global.Pioneer.CurrentCheckpointNum], Objective Position(2)))), Current Array Element[1]))[0];
		End;
		Big Message(All Players(All Teams), Custom String("new pioneer [{0}]", Global.Pioneer));
	}
}

rule("开拓时回到了点内")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.GameState == 2;
		Global.TempNextCheckpointPosition == False;
		Distance Between(Global.Pioneer, Global.CheckpointsPosition[Global.Pioneer.CurrentCheckpointNum])
			<= Global.CheckpointDefaultRadius + 0.400;
	}

	action
	{
		Global.PioneerAbility1Used = 0;
		Global.PioneerUltimateUsed = 0;
	}
}

rule("如果地图为3CP图, 开拓者发送前进可以传送至其它小图")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.GameState == 2;
		Global.TempNextCheckpointPosition == False;
		Is Communicating Any Spray(Global.Pioneer) == True;
		Is Button Held(Global.Pioneer, Button(Interact)) == True;
		Current Game Mode == Game Mode(쟁탈);
	}

	action
	{
		Global.ObjectivePosition += Global.ObjectivePosition == 2 ? -2 : 1;
		While(Distance Between(Global.CheckpointsPosition[Global.Pioneer.CurrentCheckpointNum], Objective Position(
			Global.ObjectivePosition)) < 250 && Absolute Value(Y Component Of(
			Global.CheckpointsPosition[Global.Pioneer.CurrentCheckpointNum] - Objective Position(Global.ObjectivePosition))) < 30);
			Global.ObjectivePosition += Global.ObjectivePosition == 2 ? -2 : 1;
		End;
		Teleport(Global.Pioneer, Nearest Walkable Position(Objective Position(Global.ObjectivePosition)) + Vector(0, 1, 0));
	}
}

rule("开拓时使用了影")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.GameState == 2;
		Global.TempNextCheckpointPosition == False;
		Is Using Ability 1(Global.Pioneer) == True;
	}

	action
	{
		Wait Until(Distance Between(Global.Pioneer, Global.CheckpointsPosition[Global.Pioneer.CurrentCheckpointNum])
			> Global.CheckpointDefaultRadius + 0.400, 0.300);
		If(Distance Between(Global.Pioneer, Global.CheckpointsPosition[Global.Pioneer.CurrentCheckpointNum])
			> Global.CheckpointDefaultRadius + 0.400);
			Global.PioneerAbility1Used = Global.PioneerAbility1Used + 1;
		End;
	}
}

rule("开拓时使用了斩")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.GameState == 2;
		Global.TempNextCheckpointPosition == False;
		Is Using Ultimate(Global.Pioneer) == True;
	}

	action
	{
		Set Ultimate Ability Enabled(Global.Pioneer, False);
		Wait Until(Distance Between(Global.Pioneer, Global.CheckpointsPosition[Global.Pioneer.CurrentCheckpointNum])
			> Global.CheckpointDefaultRadius + 0.400, 1.500);
		If(Distance Between(Global.Pioneer, Global.CheckpointsPosition[Global.Pioneer.CurrentCheckpointNum])
			> Global.CheckpointDefaultRadius + 0.400);
			Global.PioneerUltimateUsed = Global.PioneerUltimateUsed + 1;
		End;
		Wait Until(!Is Using Ultimate(Global.Pioneer), 99999);
		Set Ultimate Ability Enabled(Global.Pioneer, True);
		Set Ultimate Charge(Global.Pioneer, 100);
	}
}

rule("开拓者退出了游戏")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	condition
	{
		Event Player == Global.Pioneer;
	}

	action
	{
		Global.Pioneer = Random Value In Array(Mapped Array(Filtered Array(All Players(All Teams),
			Current Array Element.CurrentCheckpointNum + 1 == Count Of(Global.CheckpointsPosition)), Current Array Element));
		Call Subroutine(ResetPioneerState);
		Stop Chasing Global Variable(PioneerOpenUpTimeUsed);
		Global.PioneerOpenUpTimeUsed = 0;
		Global.ChasingOpenUpTime = False;
		If(!Global.Pioneer);
			Global.GameState = 3;
		Else;
			Big Message(All Players(All Teams), Custom String("pioneer quit the game, randomly pick [{0}] as the new pioneer",
				Global.Pioneer));
			Global.Pioneer.CurrentCheckpointNum = Global.Pioneer.MaxCheckpointNum;
			Kill(Global.Pioneer, Null);
		End;
	}
}

rule("连续开拓")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Global.EnableTimer == False;
		Is Alive(Event Player) == True;
		Global.AllowContinueslyOpenUp != False;
		Global.Pioneer == Null;
		Event Player.CurrentCheckpointNum == Count Of(Global.CheckpointsPosition) - 1;
		Is Button Held(Event Player, Button(Reload)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	action
	{
		Global.Pioneer = Event Player;
		Call Subroutine(ToCurrentCheckpoint);
		Call Subroutine(EnableAllAbilities);
		Global.GameState = 2;
	}
}

rule("开拓时限")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		"当开拓者开始开拓"
		Global.GameState == 2;
		"并且到达最后一个关卡的人数超过LastCheckpointPlayerNum人时"
		Count Of(Mapped Array(Filtered Array(All Players(All Teams), Current Array Element.CurrentCheckpointNum + 1 == Count Of(
			Global.CheckpointsPosition)), Current Array Element)) >= Global.LastCheckpointPlayerNum;
		Global.Pioneer != False;
		Global.ChasingOpenUpTime == False;
	}

	action
	{
		"开始倒计时"
		Global.PioneerOpenUpTimeUsed = 0;
		Chase Global Variable At Rate(PioneerOpenUpTimeUsed, Global.PioneerOpenUpTimeLimit, 1, Destination and Rate);
		Global.ChasingOpenUpTime = True;
	}
}

rule("开拓超时，随机更换开拓者")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.GameState == 2;
		Count Of(Mapped Array(Filtered Array(All Players(All Teams), Current Array Element.CurrentCheckpointNum + 1 == Count Of(
			Global.CheckpointsPosition)), Current Array Element)) > 1;
		Global.ChasingOpenUpTime != False;
		Global.PioneerOpenUpTimeUsed == Global.PioneerOpenUpTimeLimit;
	}

	action
	{
		Global.ChasingOpenUpTime = False;
		Big Message(All Players(All Teams), Custom String("[{0}] pioneers overtime, randomly pick the next pioneer", Global.Pioneer));
		Wait(0.016, Ignore Condition);
		Call Subroutine(ResetPioneerState);
		Global.T = Mapped Array(Filtered Array(All Players(All Teams), Current Array Element.CurrentCheckpointNum + 1 == Count Of(
			Global.CheckpointsPosition)), Current Array Element);
		Modify Global Variable(T, Remove From Array By Value, Global.Pioneer);
		Global.Pioneer = Random Value In Array(Global.T);
		If(Global.Pioneer);
			Big Message(All Players(All Teams), Custom String("new pioneer [{0}]", Global.Pioneer));
			Global.Pioneer.CurrentCheckpointNum = Global.Pioneer.MaxCheckpointNum;
			Kill(Global.Pioneer, Null);
			Small Message(Global.Pioneer, Custom String("you become new pioneer"));
		End;
	}
}

rule("取消开拓者的自由行动")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.Pioneer.FreeMode != False;
	}

	action
	{
		Global.Pioneer.FreeMode = False;
	}
}

rule("放弃开拓者身份")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Is Button Held(Global.Pioneer, Button(Primary Fire)) == True;
		Is Button Held(Global.Pioneer, Button(Secondary Fire)) == True;
	}

	action
	{
		For Global Variable(T, 0, 3, 1);
			Wait(1, Abort When False);
			Small Message(Global.Pioneer, Custom String("hold {0} and {1} to give up pioneering after {2} sec", Input Binding String(Button(
				Primary Fire)), Input Binding String(Button(Secondary Fire)), 3 - Global.T));
		End;
		Big Message(All Players(All Teams), Custom String("[{0}] gives up pioneering", Global.Pioneer));
		Big Message(All Players(All Teams), Custom String("Other players who reach the final level can press {0}+{1} to become pioneer",
			Input Binding String(Button(Interact)), Input Binding String(Button(Reload))));
		Wait(0.016, Ignore Condition);
		Global.GameState = 3;
		Call Subroutine(ResetPioneerState);
		Global.Pioneer = Null;
		Stop Chasing Global Variable(PioneerOpenUpTimeUsed);
		Global.PioneerOpenUpTimeUsed = 0;
		Global.ChasingOpenUpTime = False;
	}
}

rule("切换隐身")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Is Communicating(Event Player, Group Up) == True;
	}

	action
	{
		Event Player.Invisible = !Event Player.Invisible;
		If(Event Player.Invisible);
			Big Message(Event Player, Custom String("invisible"));
			Set Invisible(Event Player, All);
		Else;
			Big Message(Event Player, Custom String("visible"));
			Set Invisible(Event Player, None);
		End;
	}
}

rule("保持无敌和免碰撞")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		Has Status(Event Player, Invincible) == False;
	}

	action
	{
		Clear Status(Event Player, Invincible);
		Disable Movement Collision With Players(Event Player);
		Wait(0.016, Ignore Condition);
		Set Status(Event Player, Null, Invincible, 9999);
	}
}

rule("当没有开拓者也没有关卡的时候，提示所有人如何成为开拓者")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.GameState == 1;
	}

	action
	{
		Small Message(All Players(All Teams), Custom String("press {0}+{1} to become pioneer", Input Binding String(Button(Interact)),
			Input Binding String(Button(Reload))));
		Wait(3, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("落地")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Global.GameState != 1;
		(Global.GameState == 2 && Global.Pioneer == Event Player) == False;
		Is On Ground(Event Player) == True;
		Event Player.FreeMode == False;
		Event Player.SpectatorMode == False;
		Distance Between(Event Player, Global.CheckpointsPosition[Event Player.CurrentCheckpointNum])
			> Global.CheckpointDefaultRadius + 0.400;
	}

	action
	{
		If(Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1] != 0 && Distance Between(Event Player,
			Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1]) <= Global.CheckpointDefaultRadius + 0.400);
			Call Subroutine(ToNextCheckpoint);
		Else;
			If(Is Using Ultimate(Event Player));
				Kill(Event Player, Null);
				Abort;
			End;
			Teleport(Event Player, Global.CheckpointsPosition[Event Player.CurrentCheckpointNum]);
			Set Status(Event Player, Null, Rooted, 0.100);
			If(Horizontal Speed Of(Event Player) > 6);
				Call Subroutine(CancelAbilityAndMomentum);
			End;
			Disallow Button(Event Player, Button(Jump));
			Wait(0.100, Ignore Condition);
			Allow Button(Event Player, Button(Jump));
		End;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("玩家进入下一个关卡")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Event Player.SpectatorMode == False;
		Event Player.FreeMode == False;
		Global.GameState != 1;
		Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1] != 0;
		Distance Between(Event Player, Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1])
			<= Global.CheckpointDefaultRadius + 0.400;
		Is On Ground(Event Player) == True;
	}

	action
	{
		Call Subroutine(ToNextCheckpoint);
	}
}

rule("回到当前关卡设置技能")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Event Player.FreeMode == False;
		Global.GameState != 1;
		Is On Ground(Event Player) == True;
		Is Alive(Event Player) == True;
		Distance Between(Event Player, Global.CheckpointsPosition[Event Player.CurrentCheckpointNum])
			<= Global.CheckpointDefaultRadius + 0.400;
	}

	action
	{
		If(Event Player.CurrentCheckpointNum + 1 < Count Of(Global.CheckpointsPosition));
			Call Subroutine(SetCheckpointAbilities);
		Else;
			Call Subroutine(EnableAllAbilities);
		End;
	}
}

rule("Subroutine SetCheckpointAbilities")
{
	event
	{
		Subroutine;
		SetCheckpointAbilities;
	}

	action
	{
		Set Ability 1 Enabled(Event Player, Global.CheckpointsAbility1Enabled[Event Player.CurrentCheckpointNum] > 0);
		Set Ultimate Ability Enabled(Event Player, Global.CheckpointsUltimateEnabled[Event Player.CurrentCheckpointNum] > 0);
		Set Ultimate Charge(Event Player, 100);
		Event Player.Ability1Used = 0;
		Event Player.UltimateUsed = 0;
	}
}

rule("Subroutine CancelAbilityAndMomentum")
{
	event
	{
		Subroutine;
		CancelAbilityAndMomentum;
	}

	action
	{
		Cancel Primary Action(Event Player);
		Apply Impulse(Event Player, Up, 0, To World, Cancel Contrary Motion XYZ);
		Wait(0.016, Restart When True);
		Apply Impulse(Event Player, Normalize(Velocity Of(Event Player)) * -1 * 1, Speed Of(Event Player), To World,
			Incorporate Contrary Motion);
	}
}

rule("Subroutine ToCurrentCheckpoint")
{
	event
	{
		Subroutine;
		ToCurrentCheckpoint;
	}

	action
	{
		Call Subroutine(CancelAbilityAndMomentum);
		Teleport(Event Player, Global.CheckpointsPosition[Event Player.CurrentCheckpointNum]);
	}
}

rule("Subroutine ToNextCheckpoint")
{
	event
	{
		Subroutine;
		ToNextCheckpoint;
	}

	action
	{
		Event Player.CurrentCheckpointNum = Event Player.CurrentCheckpointNum + 1;
		If(Distance Between(Event Player, Global.CheckpointsPosition[Event Player.CurrentCheckpointNum])
			> Global.CheckpointDefaultRadius + 0.400);
			Call Subroutine(ToCurrentCheckpoint);
		End;
		If(Event Player.CurrentCheckpointNum > Event Player.MaxCheckpointNum);
			Event Player.MaxCheckpointNum = Event Player.CurrentCheckpointNum;
		End;
		If(!Global.EnableTimer);
			Call Subroutine(AutoSaveProgress);
			Event Player.RankSort = Count Of(Mapped Array(Filtered Array(All Players(All Teams),
				Current Array Element.MaxCheckpointNum >= Event Player.MaxCheckpointNum), Current Array Element)) / 100;
		End;
		Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 100);
		If(Event Player.CurrentCheckpointNum + 1 == Count Of(Global.CheckpointsPosition));
			Event Player.FreeMode = True;
			Call Subroutine(EnableAllAbilities);
			If(!Global.EnableTimer);
				If(
					Global.GameState == 3 && Global.Pioneer == Null && Global.CheckpointsCreator[Event Player.CurrentCheckpointNum - 1] != Event Player);
					Global.Pioneer = Event Player;
					Event Player.FreeMode = False;
					Call Subroutine(CancelAbilityAndMomentum);
					Call Subroutine(EnableAllAbilities);
					Global.GameState = 2;
				End;
			Else If(Global.EnableTimer && !Event Player.TimerPaused && Event Player.Timer > 0);
				Stop Chasing Player Variable(Event Player, Timer);
				If(Event Player.Timer < Event Player.BestRecord);
					Event Player.BestRecord = Event Player.Timer;
					If(Count Of(Mapped Array(Filtered Array(Global.PlayersRecord, Current Array Element[0] == Custom String("{0}", Event Player)),
						Current Array Element)));
						For Global Variable(I, 0, Count Of(Global.PlayersRecord), 1);
							If(Global.PlayersRecord[Global.I][0] == Custom String("{0}", Event Player));
								Global.T = Global.PlayersRecord[Global.I];
								Modify Global Variable(PlayersRecord, Remove From Array By Index, Global.I);
								Global.T[1] = Event Player.BestRecord;
								Modify Global Variable(PlayersRecord, Append To Array, Array(Global.T));
								Break;
							End;
						End;
					Else;
						Global.PlayersRecord[Count Of(Global.PlayersRecord)] = Array(Custom String("{0}", Event Player), Event Player.BestRecord);
					End;
					Global.PlayersRecord = Sorted Array(Global.PlayersRecord, Current Array Element[1]);
					Global.Top5 = Array Slice(Sorted Array(Global.PlayersRecord, Current Array Element[1]), 0, 5);
				End;
				Wait(0.016, Ignore Condition);
				Big Message(All Players(All Teams), Custom String("Congratulation!"));
				Big Message(All Players(All Teams), Custom String("[{0}] has completed, use time  {1}  sec", Event Player, Event Player.Timer));
				Start Forcing Player Outlines(Event Player, All Players(All Teams), True, Color(Orange), Always);
				Wait(0.016, Ignore Condition);
				Event Player.Timer = 0;
			End;
		End;
	}
}

rule("Subroutine EnableAllAbilities")
{
	event
	{
		Subroutine;
		EnableAllAbilities;
	}

	action
	{
		Set Ability 1 Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("自由行动或者已经通关的人无限制使用斩")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		"当前玩家是开拓者并且正在开拓新关卡时不处理"
		(Event Player.FreeMode || Global.GameState == 1 || (
			Event Player == Global.Pioneer && Global.GameState == 2 && Global.TempNextCheckpointPosition)) == True;
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Set Ultimate Ability Enabled(Event Player, False);
		Wait Until(!Is Using Ultimate(Event Player), 99999);
		If(Event Player.FreeMode || Global.GameState == 1 || (
			Event Player == Global.Pioneer && Global.GameState == 2 && Global.TempNextCheckpointPosition));
			Set Ultimate Ability Enabled(Event Player, True);
			Set Ultimate Charge(Event Player, 100);
		End;
	}
}

rule("影使用限制")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Event Player != Global.Pioneer;
		Event Player.FreeMode == False;
		Event Player.CurrentCheckpointNum < Count Of(Global.CheckpointsPosition) - 1;
		Is Using Ability 1(Event Player) == True;
	}

	action
	{
		Wait Until(Distance Between(Event Player, Global.CheckpointsPosition[Event Player.CurrentCheckpointNum])
			> Global.CheckpointDefaultRadius + 0.400, 0.300);
		If(Distance Between(Event Player, Global.CheckpointsPosition[Event Player.CurrentCheckpointNum])
			> Global.CheckpointDefaultRadius + 0.400);
			Event Player.Ability1Used = Event Player.Ability1Used + 1;
			If(Event Player.Ability1Used >= Global.CheckpointsAbility1Enabled[Event Player.CurrentCheckpointNum]);
				Set Ability 1 Enabled(Event Player, False);
			End;
		End;
	}
}

rule("斩使用限制")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Event Player != Global.Pioneer;
		Event Player.FreeMode == False;
		Event Player.CurrentCheckpointNum < Count Of(Global.CheckpointsPosition) - 1;
		Is Using Ultimate(Event Player) == True;
	}

	action
	{
		Set Ultimate Ability Enabled(Event Player, False);
		Wait Until(Distance Between(Event Player, Global.CheckpointsPosition[Event Player.CurrentCheckpointNum])
			> Global.CheckpointDefaultRadius + 0.400, 1.500);
		If(Distance Between(Event Player, Global.CheckpointsPosition[Event Player.CurrentCheckpointNum])
			> Global.CheckpointDefaultRadius + 0.400);
			Event Player.UltimateUsed = Event Player.UltimateUsed + 1;
		End;
		Wait Until(!Is Using Ultimate(Event Player), 99999);
		If(Event Player.UltimateUsed < Global.CheckpointsUltimateEnabled[Event Player.CurrentCheckpointNum] || Event Player.FreeMode);
			Set Ultimate Ability Enabled(Event Player, True);
			Set Ultimate Charge(Event Player, 100);
		End;
	}
}

rule("自杀回点")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Event Player.SpectatorMode == False;
		Event Player.FreeMode == False;
		Is Using Ability 1(Event Player) == False;
		Is Button Held(Event Player, Button(Reload)) == True;
		Is Button Held(Event Player, Button(Melee)) == False;
		Is Button Held(Event Player, Button(Ultimate)) == False;
		Is Button Held(Event Player, Button(Ability 1)) == False;
		Is Button Held(Event Player, Button(Ability 2)) == False;
		Is Button Held(Event Player, Button(Primary Fire)) == False;
		Is Button Held(Event Player, Button(Secondary Fire)) == False;
		Is Button Held(Event Player, Button(Jump)) == False;
		Distance Between(Event Player, Global.CheckpointsPosition[Event Player.CurrentCheckpointNum])
			> Global.CheckpointDefaultRadius + 0.400;
	}

	action
	{
		If(Is Using Ultimate(Event Player));
			Kill(Event Player, Null);
			Abort;
		End;
		Call Subroutine(ToCurrentCheckpoint);
		If(Event Player == Global.Pioneer && Global.GameState == 2);
			Call Subroutine(ResetPioneerState);
			Call Subroutine(EnableAllAbilities);
		End;
	}
}

rule("重生")
{
	event
	{
		Player Died;
		All;
		All;
	}

	condition
	{
		Event Player.SpectatorMode == False;
	}

	action
	{
		If(Event Player == Global.Pioneer && Global.GameState == 2);
			Call Subroutine(ResetPioneerState);
			Call Subroutine(EnableAllAbilities);
		End;
		Event Player.PreviousPosition = Position Of(Event Player);
		If(!Event Player.FreeMode && Count Of(Global.CheckpointsPosition) > 0);
			Call Subroutine(ToCurrentCheckpoint);
		Else;
			Teleport(Event Player, Nearest Walkable Position(Event Player.PreviousPosition));
		End;
		If(!Event Was Environment);
			Cancel Primary Action(Event Player);
		End;
		Resurrect(Event Player);
		Event Player.SelfKill = False;
	}
}

rule("观战")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Event Player.NextCheckpointsPreview == False;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Button Held(Event Player, Button(Crouch)) == False;
	}

	action
	{
		Event Player.SpectatorMode = !Event Player.SpectatorMode;
		If(Event Player.SpectatorMode);
			Call Subroutine(CancelAbilityAndMomentum);
			Disable Built-In Game Mode Respawning(Event Player);
			Kill(Event Player, Null);
			Small Message(Event Player, Custom String("Spectate mode"));
			Small Message(Event Player, Custom String("press {0} or {1} to switch spectator, jump to switch perspective", Input Binding String(
				Button(Primary Fire)), Input Binding String(Button(Secondary Fire))));
		Else;
			Enable Built-In Game Mode Respawning(Event Player);
			Resurrect(Event Player);
			Call Subroutine(ToCurrentCheckpoint);
			Small Message(Event Player, Custom String("nomal mode"));
			Call Subroutine(CancelAbilityAndMomentum);
		End;
		Wait(1, Ignore Condition);
	}
}

rule("回到起点")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Event Player.NextCheckpointsPreview == False;
		Event Player.SpectatorMode == False;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	action
	{
		If(Event Player == Global.Pioneer && Global.GameState == 2);
			Small Message(Event Player, Custom String("pioneer can't Restart"));
			Abort;
		End;
		Play Effect(All Players(All Teams), Tracer Recall Disappear Sound, Null, Event Player, 200);
		Cancel Primary Action(Event Player);
		Event Player.CurrentCheckpointNum = 0;
		Call Subroutine(ToCurrentCheckpoint);
		Event Player.FreeMode = False;
		Play Effect(All Players(All Teams), Tracer Recall Reappear Sound, Null, Event Player, 200);
		Wait(1, Ignore Condition);
	}
}

rule("开关跳转指定关卡")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		(Event Player == Global.Pioneer) == False;
		Event Player.SpectatorMode == False;
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	action
	{
		Wait(0.650, Abort When False);
		If(!Is On Ground(Event Player));
			Abort;
		End;
		Event Player.JumpingCheckpoint = !Event Player.JumpingCheckpoint;
		If(Event Player.JumpingCheckpoint);
			Create HUD Text(Event Player, Custom String(
				"Move the mouse left and right to adjust the level you want to jump\n　(Must have been already reached)\n　　　　　　[{0}]\n　　　　{1}confirm,",
				Round To Integer((Event Player.MaxCheckpointNum + 1) / 360 * (Horizontal Facing Angle Of(Event Player) + 180), Down),
				Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire))), Null, Null, Top, 6, Color(White),
				Null, Null, Visible To and String, Default Visibility);
			Event Player.JumpingCheckpointHUD = Last Text ID;
			Set Status(Event Player, Null, Rooted, 9999);
		Else;
			Destroy HUD Text(Event Player.JumpingCheckpointHUD);
			Event Player.JumpingCheckpoint = False;
			Call Subroutine(CancelAbilityAndMomentum);
			Clear Status(Event Player, Rooted);
		End;
	}
}

rule("跳转指定关卡")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Event Player.SpectatorMode == False;
		Event Player.JumpingCheckpoint != False;
		(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))) == True;
	}

	action
	{
		If(Is Button Held(Event Player, Button(Primary Fire)));
			If(Event Player == Global.Pioneer);
				Small Message(Event Player, Custom String("pioneer can't jump"));
				Abort;
			End;
			Event Player.CurrentCheckpointNum = Round To Integer((Event Player.MaxCheckpointNum + 1) / 360 * (Horizontal Facing Angle Of(
				Event Player) + 180), Down);
			Call Subroutine(ToCurrentCheckpoint);
			Call Subroutine(SetCheckpointAbilities);
			Event Player.FreeMode = False;
			If(Global.EnableTimer && !Event Player.TimerPaused);
				Call Subroutine(StopAndClearTimer);
			End;
			If(Event Player.CurrentCheckpointNum == 0 && Speed Of(Event Player) > 6);
				Kill(Event Player, Null);
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Destroy HUD Text(Event Player.JumpingCheckpointHUD);
			Event Player.JumpingCheckpoint = False;
			Call Subroutine(CancelAbilityAndMomentum);
			Clear Status(Event Player, Rooted);
		End;
	}
}

rule("跳关+ ／ 跳关-")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Event Player.SpectatorMode == False;
		Event Player.NextCheckpointsPreview == False;
		Is Using Ability 1(Event Player) == False;
		(Is Button Held(Event Player, Button(Crouch)) || Is Button Held(Event Player, Button(Jump))) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Ability 2)) == False;
	}

	action
	{
		If(Event Player == Global.Pioneer && Global.GameState == 2);
			Small Message(Event Player, Custom String("pioneer can't jump"));
			Abort;
		End;
		If(Event Player.SpectatorMode);
			Small Message(Event Player, Custom String("can't jump in spectate mode"));
			Abort;
		End;
		Cancel Primary Action(Event Player);
		Event Player.FreeMode = False;
		If(Is Button Held(Event Player, Button(Jump)));
			Event Player.CurrentCheckpointNum = Event Player.CurrentCheckpointNum + 1;
			While(Global.CheckpointsAutoTeleport[Event Player.CurrentCheckpointNum]);
				Event Player.CurrentCheckpointNum = Event Player.CurrentCheckpointNum + 1;
			End;
			If(Event Player.CurrentCheckpointNum > Event Player.MaxCheckpointNum);
				Event Player.CurrentCheckpointNum = 0;
			End;
			Call Subroutine(ToCurrentCheckpoint);
			Call Subroutine(SetCheckpointAbilities);
			If(Global.EnableTimer && !Event Player.TimerPaused);
				Call Subroutine(StopAndClearTimer);
			End;
		End;
		If(Is Button Held(Event Player, Button(Crouch)));
			Teleport(Event Player, Vector(0, 500, 0));
			Event Player.CurrentCheckpointNum = Event Player.CurrentCheckpointNum - 1;
			While(Global.CheckpointsAutoTeleport[Event Player.CurrentCheckpointNum]);
				Event Player.CurrentCheckpointNum = Event Player.CurrentCheckpointNum - 1;
			End;
			If(Event Player.CurrentCheckpointNum < 0);
				Event Player.CurrentCheckpointNum = Event Player.MaxCheckpointNum;
			End;
			Call Subroutine(ToCurrentCheckpoint);
			Call Subroutine(SetCheckpointAbilities);
			If(Global.EnableTimer && !Event Player.TimerPaused);
				Call Subroutine(StopAndClearTimer);
			End;
		End;
	}
}

rule("3CP图如果开拓关在另一小图, 自动传送")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Event Player.SpectatorMode == False;
		Event Player.NextCheckpointsPreview == False;
		Global.CheckpointsAutoTeleport[Event Player.CurrentCheckpointNum] == True;
	}

	action
	{
		Cancel Primary Action(Event Player);
		Event Player.FreeMode = False;
		Event Player.CurrentCheckpointNum = Event Player.CurrentCheckpointNum + 1;
		While(Global.CheckpointsAutoTeleport[Event Player.CurrentCheckpointNum]);
			Event Player.CurrentCheckpointNum = Event Player.CurrentCheckpointNum + 1;
		End;
		If(Event Player.CurrentCheckpointNum > Event Player.MaxCheckpointNum);
			Event Player.MaxCheckpointNum = Event Player.CurrentCheckpointNum;
		End;
		Call Subroutine(ToCurrentCheckpoint);
		Call Subroutine(SetCheckpointAbilities);
		If(Global.EnableTimer && !Event Player.TimerPaused);
			Call Subroutine(StopAndClearTimer);
		End;
	}
}

rule("自由行动")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		(Global.GameState == 1) == False;
		(Global.GameState == 2 && Global.Pioneer == Event Player) == False;
		Is Using Ability 1(Event Player) == False;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	action
	{
		If(!Event Player.FreeMode);
			Small Message(Event Player, Custom String("Invincible mode"));
			Call Subroutine(EnableAllAbilities);
			Event Player.FreeMode = !Event Player.FreeMode;
		Else If(!Is Using Ability 1(Event Player));
			Call Subroutine(ToCurrentCheckpoint);
			If(Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1] != 0);
				Call Subroutine(SetCheckpointAbilities);
			End;
			Call Subroutine(CancelAbilityAndMomentum);
			Start Forcing Player Position(Event Player, Position Of(Event Player), False);
			Wait(0.080, Ignore Condition);
			Stop Forcing Player Position(Event Player);
			Kill(Is Using Ultimate(Event Player) ? Event Player : Null, Null);
			Event Player.FreeMode = !Event Player.FreeMode;
		End;
	}
}

rule("预览关卡")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Event Player.SpectatorMode == False;
		Count Of(Global.CheckpointsPosition) > 1;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1] != 0;
		Distance Between(Event Player, Global.CheckpointsPosition[Event Player.CurrentCheckpointNum])
			<= Global.CheckpointDefaultRadius + 0.400;
	}

	action
	{
		Event Player.NextCheckpointsPreview = !Event Player.NextCheckpointsPreview;
		If(Event Player.NextCheckpointsPreview);
			Small Message(Event Player, Custom String("previewing the next level, any key to exit the preview"));
			If(!Global.CheckpointsPreview[Event Player.CurrentCheckpointNum]);
				Global.NextCheckpointPosition = Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1];
				Global.TempArray = Mapped Array(Global.TempArray, Distance Between(Global.NextCheckpointPosition, Ray Cast Hit Position(
					Global.NextCheckpointPosition, Global.NextCheckpointPosition + Direction From Angles(Current Array Index * 30, -45) * 15, Null,
					Null, False)));
				While(Absolute Value(Count Of(Remove From Array(Global.TempArray, Last Of(Sorted Array(Global.TempArray, Current Array Element))))
					- 5.500) < 5.500);
					Global.TempArray = Mapped Array(Global.TempArray, Global.TempArray[(Current Array Index + 11)
						% 12] + Current Array Element + Global.TempArray[(Current Array Index + 1) % 12]);
				End;
				Global.CheckpointsPreview[Event Player.CurrentCheckpointNum] = Ray Cast Hit Position(Global.NextCheckpointPosition,
					Global.NextCheckpointPosition + 15 * Direction From Angles(30 * Index Of Array Value(Global.TempArray, Last Of(Sorted Array(
					Global.TempArray, Current Array Element))), -45), All Players(All Teams), Event Player, True);
			End;
			Set Facing(Event Player, Direction Towards(Global.CheckpointsPreview[Event Player.CurrentCheckpointNum],
				Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1]), To World);
			Start Camera(Event Player, Ray Cast Hit Position(Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1],
				Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1] + Facing Direction Of(Event Player) * -15, Null, Null,
				False), Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1], 30);
			Cancel Primary Action(Event Player);
		Else;
			Stop Camera(Event Player);
			Cancel Primary Action(Event Player);
			Call Subroutine(ToCurrentCheckpoint);
			Set Facing(Event Player, Direction Towards(Position Of(Event Player),
				Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1]), To World);
		End;
	}
}

rule("任意键退出预览关卡")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Event Player.NextCheckpointsPreview != False;
		(Is Button Held(Event Player, Button(Ability 1)) || Is Button Held(Event Player, Button(Interact)) || Is Button Held(Event Player,
			Button(Ability 2)) || Is Button Held(Event Player, Button(Ultimate)) || Is Button Held(Event Player, Button(Jump))
			|| Is Button Held(Event Player, Button(Crouch)) || Is Button Held(Event Player, Button(Reload)) || Is Button Held(Event Player,
			Button(Melee))) == True;
	}

	action
	{
		Event Player.NextCheckpointsPreview = False;
		Stop Camera(Event Player);
		Call Subroutine(ToCurrentCheckpoint);
		Set Facing(Event Player, Direction Towards(Position Of(Event Player),
			Global.CheckpointsPosition[Event Player.CurrentCheckpointNum + 1]), To World);
	}
}

rule("Subroutine 自动保存进度")
{
	event
	{
		Subroutine;
		AutoSaveProgress;
	}

	action
	{
		Event Player.TempVar = Index Of Array Value(Global.PlayersNameRecords, Custom String("{0}", Event Player));
		If(Event Player.TempVar >= 0);
			Global.PlayersMaxCheckpointRecords[Event Player.TempVar] = Event Player.MaxCheckpointNum;
		Else;
			Modify Global Variable(PlayersNameRecords, Append To Array, Custom String("{0}", Event Player));
			Event Player.TempVar = Index Of Array Value(Global.PlayersNameRecords, Custom String("{0}", Event Player));
			Global.PlayersMaxCheckpointRecords[Event Player.TempVar] = Event Player.MaxCheckpointNum;
		End;
	}
}

rule("进入时恢复进度")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	condition
	{
		Global.EnableTimer == False;
	}

	action
	{
		Event Player.TempVar = Index Of Array Value(Global.PlayersNameRecords, Custom String("{0}", Event Player));
		If(Event Player.TempVar >= 0);
			Event Player.MaxCheckpointNum = Global.PlayersMaxCheckpointRecords[Event Player.TempVar];
			Event Player.CurrentCheckpointNum = Event Player.MaxCheckpointNum;
		End;
	}
}

rule("开始计时")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Global.EnableTimer != False;
		Event Player.FreeMode == False;
		Event Player.CurrentCheckpointNum == 0;
		Distance Between(Event Player, Global.CheckpointsPosition[Event Player.CurrentCheckpointNum])
			> Global.CheckpointDefaultRadius + 0.400;
		Event Player.TimerPaused == False;
	}

	action
	{
		Chase Player Variable At Rate(Event Player, Timer, 16200, 1, None);
	}
}

rule("停止计时")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Global.EnableTimer != False;
		Event Player.FreeMode == False;
		Event Player.TimerPaused == False;
		Event Player.CurrentCheckpointNum == 0;
		Distance Between(Event Player, Global.CheckpointsPosition[Event Player.CurrentCheckpointNum])
			<= Global.CheckpointDefaultRadius + 0.400;
	}

	action
	{
		Call Subroutine(StopAndClearTimer);
	}
}

rule("Subroutine StopAndClearTimer")
{
	event
	{
		Subroutine;
		StopAndClearTimer;
	}

	action
	{
		Stop Chasing Player Variable(Event Player, Timer);
		Event Player.Timer = 0;
	}
}

rule("双击互动键")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Event Player != Global.Pioneer;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	action
	{
		Wait Until(!Is Button Held(Event Player, Button(Interact)), 9999);
		Wait Until(Is Button Held(Event Player, Button(Interact)), 0.250);
		If(Is Button Held(Event Player, Button(Interact)));
			If(!Array Contains(Global.ShowShortcutPlayers, Event Player));
				Modify Global Variable(ShowShortcutPlayers, Append To Array, Event Player);
			Else;
				Modify Global Variable(ShowShortcutPlayers, Remove From Array By Value, Event Player);
			End;
		End;
	}
}

rule("暂停/恢复计时")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		Global.EnableTimer != False;
		Is Communicating(Event Player, Need Healing) == True;
	}

	action
	{
		If(Event Player.Timer == 0);
			Small Message(Event Player, Custom String("Pause is currently unavailable because the timer is 0"));
			Abort;
		End;
		Event Player.TimerPaused = !Event Player.TimerPaused;
		If(Event Player.TimerPaused);
			Big Message(Event Player, Custom String("timer pauses"));
			Big Message(Event Player, Custom String("Use hotkeys again to restore current level progress and timers"));
			Stop Chasing Player Variable(Event Player, Timer);
			Event Player.TimerPausedCheckpointNum = Event Player.CurrentCheckpointNum;
		Else;
			Teleport(Event Player, Vector(0, 500, 0));
			Cancel Primary Action(Event Player);
			Event Player.FreeMode = False;
			Event Player.CurrentCheckpointNum = Event Player.TimerPausedCheckpointNum;
			Call Subroutine(ToCurrentCheckpoint);
			Kill(Event Player, Null);
			Chase Player Variable At Rate(Event Player, Timer, 16200, 1, None);
			Event Player.TimerPausedCheckpointNum = -1 * 1;
		End;
	}
}

rule("使其他玩家隐身1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player.StartForceInvisible == False;
	}

	action
	{
		For Player Variable(Event Player, TempVar, 0, 3, 1);
			Wait(1, Abort When False);
			Small Message(Event Player, Custom String("After {0} sec, press {1} can make players within 20 meters invisible",
				3 - Event Player.TempVar + 1, Input Binding String(Button(Primary Fire))));
		End;
		Event Player.StartForceInvisible = True;
		Create Effect(Event Player, Sphere, Color(Black), Event Player, 20, Position and Radius);
		Set Status(Event Player, Null, Hacked, 9999);
		Event Player.StartForceInvisibleEffect = Last Created Entity;
	}
}

rule("使其他玩家隐身2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	condition
	{
		Event Player.StartForceInvisible != False;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	action
	{
		Event Player.ForceInvisiblePlayer = Mapped Array(Filtered Array(Players Within Radius(Position Of(Event Player), 20, All Teams,
			Off), !Current Array Element.Invisible), Current Array Element);
		If(Event Player.ForceInvisiblePlayer);
			Event Player.ForceInvisiblePlayer.Invisible = True;
			Set Invisible(Event Player.ForceInvisiblePlayer, All);
			Small Message(Event Player, Custom String("Successfully made all players within 20 meters invisible..."));
		End;
		Destroy Effect(Event Player.StartForceInvisibleEffect);
		Clear Status(Event Player, Hacked);
		Event Player.StartForceInvisible = False;
	}
}

rule("房主权限狗")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.EnableTimer == False;
		Is Button Held(Host Player, Button(Reload)) == True;
	}

	action
	{
		Wait(2, Abort When False);
		Global.OwnerPrivilege = !Global.OwnerPrivilege;
		If(Global.OwnerPrivilege);
			Global.TargetPlayer = Player Closest To Reticle(Host Player, All Teams);
			Create HUD Text(Host Player, Custom String(
				"Adjusting the level of [{0}] to level [{1}]\nMove the mouse to target level\nPress space to switch to yourself\n　　　　{2}",
				Global.TargetPlayer, Round To Integer(Count Of(Global.CheckpointsPosition) / 360 * (Horizontal Facing Angle Of(Host Player)
				+ 180), Down), Custom String("{0}confirm, {1}cancel　　　　", Input Binding String(Button(Primary Fire)), Input Binding String(
				Button(Secondary Fire)))), Null, Null, Top, 7, Color(Orange), Null, Null, Visible To Sort Order String, Default Visibility);
			Global.OwnerPrivilegeHUD = Last Text ID;
		Else;
			Destroy HUD Text(Global.OwnerPrivilegeHUD);
		End;
	}
}

rule("调整关卡")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.OwnerPrivilege != False;
		(Is Button Held(Host Player, Button(Primary Fire)) || Is Button Held(Host Player, Button(Secondary Fire)) || Is Button Held(
			Host Player, Button(Jump))) == True;
	}

	action
	{
		If(Is Button Held(Host Player, Button(Primary Fire)));
			If(Global.TargetPlayer == Global.Pioneer);
				Small Message(Host Player, Custom String("can't adjust the level of pioneering player "));
				Abort;
			End;
			Global.TargetPlayer.FreeMode = False;
			Teleport(Global.TargetPlayer, Nearest Walkable Position(Vector(0, 500, 0)));
			Wait(0.016, Ignore Condition);
			Global.TargetPlayer.CurrentCheckpointNum = Round To Integer(Count Of(Global.CheckpointsPosition) / 360 * (
				Horizontal Facing Angle Of(Host Player) + 180), Down);
			Global.TargetPlayer.MaxCheckpointNum = Round To Integer(Count Of(Global.CheckpointsPosition) / 360 * (Horizontal Facing Angle Of(
				Host Player) + 180), Down);
			Wait(0.016, Ignore Condition);
			Teleport(Global.TargetPlayer, Nearest Walkable Position(Vector(0, 0, 0)));
		Else If(Is Button Held(Host Player, Button(Secondary Fire)));
			Global.OwnerPrivilege = False;
			Destroy HUD Text(Global.OwnerPrivilegeHUD);
		Else If(Is Button Held(Host Player, Button(Jump)));
			Global.TargetPlayer = Host Player;
		End;
	}
}

rule("房主按住互动+发送语音感谢")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Is Communicating(Host Player, Thanks) == True;
		Is Button Held(Host Player, Button(Interact)) == True;
	}

	action
	{
		If(Global.OwnerSaveGameTipsHUD);
			Destroy HUD Text(Global.OwnerSaveGameTipsHUD);
			Global.OwnerSaveGameTipsHUD = 0;
		Else;
			Small Message(Host Player, Custom String("Data has been imported into workshop inspector"));
			Enable Inspector Recording;
			Disable Inspector Recording;
			Create HUD Text(Host Player, Custom String(
				"　\n　Save steps:\n\n　　1.open workshop inspector\n　　2.click [X]\n　　3.open workshop editor\n　　4.paste data in the first rule\n\n{0}",
				Custom String("(Use Interact+Thanks again to close this hint)\n")), Null, Null, Top, 8, Color(Orange), Null, Null,
				Visible To Sort Order String, Default Visibility);
			Global.OwnerSaveGameTipsHUD = Last Text ID;
		End;
	}
}

rule("非Debug模式下每5秒自动打开一次查看器")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.Debug == False;
	}

	action
	{
		Enable Inspector Recording;
		Disable Inspector Recording;
		Wait(5, Ignore Condition);
		Loop;
	}
}

rule("删除最后一关")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Global.EnableTimer == False;
		Global.GameState != 1;
		Count Of(Global.CheckpointsPosition) > 0;
		Is Button Held(Host Player, Button(Crouch)) == True;
		Is Button Held(Host Player, Button(Ability 1)) == True;
		X Component Of(Throttle Of(Host Player)) == -1 * 1;
	}

	action
	{
		Wait(1, Abort When False);
		Global.LastPioneer = Global.CheckpointsCreator[Count Of(Global.CheckpointsCreatorText) - 1];
		Modify Global Variable(CheckpointsCreatorText, Remove From Array By Index, Count Of(Global.CheckpointsCreatorText) - 1);
		Modify Global Variable(CheckpointsCreator, Remove From Array By Index, Count Of(Global.CheckpointsCreator) - 1);
		Modify Global Variable(CheckpointsPosition, Remove From Array By Index, Count Of(Global.CheckpointsPosition) - 1);
		Modify Global Variable(CheckpointsAbility1Enabled, Remove From Array By Index, Count Of(Global.CheckpointsAbility1Enabled) - 1);
		Modify Global Variable(CheckpointsUltimateEnabled, Remove From Array By Index, Count Of(Global.CheckpointsUltimateEnabled) - 1);
		Modify Global Variable(CheckpointsAutoTeleport, Remove From Array By Index, Count Of(Global.CheckpointsAutoTeleport) - 1);
		Modify Global Variable(CheckpointsPreview, Remove From Array By Index, Count Of(Global.CheckpointsPreview) - 1);
		Big Message(All Players(All Teams), Custom String("The last level has been deleted by the host"));
		Global.T = All Players(All Teams);
		For Global Variable(I, 0, Count Of(Global.T), 1);
			If(Count Of(Global.CheckpointsPosition) > 0 && Global.T[Global.I].CurrentCheckpointNum + 1 > Count Of(Global.CheckpointsPosition));
				Global.T[Global.I].CurrentCheckpointNum = Count Of(Global.CheckpointsPosition) - 1;
				Teleport(Global.T[Global.I], Global.CheckpointsPosition[Global.T[Global.I].CurrentCheckpointNum]);
			End;
			If(Count Of(Global.CheckpointsPosition) > 0 && Global.T[Global.I].MaxCheckpointNum + 1 > Count Of(Global.CheckpointsPosition));
				Global.T[Global.I].MaxCheckpointNum = Count Of(Global.CheckpointsPosition) - 1;
			End;
			If(Count Of(Global.CheckpointsPosition) == 0);
				Global.T[Global.I].FreeMode = True;
				Call Subroutine(EnableAllAbilities);
			End;
		End;
		Call Subroutine(ResetPioneerState);
		If(Count Of(Global.CheckpointsPosition) == 0);
			Global.Pioneer = Null;
			Global.GameState = 1;
		Else If(Global.Pioneer == Null);
			If(Entity Exists(Global.LastPioneer));
				Global.Pioneer = Global.LastPioneer;
			Else;
				Global.Pioneer = Random Value In Array(Mapped Array(Filtered Array(All Players(All Teams),
					Current Array Element.CurrentCheckpointNum + 1 == Count Of(Global.CheckpointsPosition)), Current Array Element));
			End;
			Global.Pioneer.CurrentCheckpointNum = Global.Pioneer.MaxCheckpointNum;
			Kill(Global.Pioneer, Null);
			Set Ability 1 Enabled(Global.Pioneer, True);
			Set Ultimate Ability Enabled(Global.Pioneer, True);
			Set Ultimate Charge(Global.Pioneer, 100);
			Global.GameState = 2;
		Else;
			Global.GameState = 2;
		End;
		Global.PlayersMaxCheckpointRecords = Mapped Array(Global.PlayersMaxCheckpointRecords, Max(0, Current Array Element > Count Of(
			Global.CheckpointsPosition) - 1 ? Count Of(Global.CheckpointsPosition) - 1 : Current Array Element));
	}
}

rule("落地重置二段,爬墙,小跳")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		Is On Ground(Event Player) == True;
	}

	action
	{
		Event Player.Jump = 2;
		Event Player.Bhop = 0;
		Event Player.Climb = 1;
	}
}

rule("直接跳跃")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		Is Button Held(Event Player, Button(Jump)) == True;
		Event Player.Jump != 0;
	}

	action
	{
		Event Player.Jump -= 1;
	}
}

rule("跳跃变量归零, 用于判定三段")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		Event Player.Jump == 1;
	}

	action
	{
		Wait(0.100, Abort When False);
		Event Player.Jump = 0;
	}
}

rule("常规小跳")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		Event Player.Jump == 2;
		Is In Air(Event Player) == True;
	}

	action
	{
		Event Player.Jump = 1;
		If(!Is Button Held(Event Player, Button(Jump)));
			Event Player.Bhop = 1;
		End;
	}
}

rule("表情小跳")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		Is Communicating Any Emote(Event Player) == True;
	}

	action
	{
		If(Global.EmoteBhop);
			Event Player.Bhop = 1;
		Else;
			Kill(!Event Player.FreeMode ? Event Player : Null, Null);
			Small Message(Event Player, Custom String("{0}: Emote is disabled", Hero Icon String(Hero(겐지))));
		End;
	}
}

rule("蹲卡小 Githuboy#5249")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		Is On Wall(Event Player) == False;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Jump)) == False;
		Is On Ground(Event Player) == False;
		Is In Air(Event Player) == True;
		Is Jumping(Event Player) == False;
		Is Crouching(Event Player) == True;
		Vertical Speed Of(Event Player) >= 6;
	}

	action
	{
		If(Global.BugBhop);
			Event Player.Bhop = 1;
			Small Message(Event Player, Custom String("Success!"));
		Else;
			Kill(!Event Player.FreeMode ? Event Player : Null, Null);
			Small Message(Event Player, Custom String("{0}: create is disabled", Hero Icon String(Hero(겐지))));
		End;
	}
}

rule("系统跳判定, 用于避免站卡小误判定")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		Speed Of(Event Player) == 0;
		Is On Ground(Event Player) == False;
	}

	action
	{
		Wait(0.500, Abort When False);
		Event Player.BugJump = 1;
		Wait Until(Vertical Speed Of(Event Player) > 6 || Is On Ground(Event Player), 3.500);
		If(Vertical Speed Of(Event Player) > 6);
			Wait(1, Ignore Condition);
		End;
		Event Player.BugJump = 0;
	}
}

rule("站卡小")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		Is On Ground(Event Player) == False;
		Is In Air(Event Player) == True;
		Is On Wall(Event Player) == False;
		Is Jumping(Event Player) == False;
		Is Button Held(Event Player, Button(Jump)) == False;
		Is Crouching(Event Player) == False;
		Is Button Held(Event Player, Button(Crouch)) == False;
		Is Using Ability 1(Event Player) == False;
		Speed Of(Event Player) >= 7.200;
		Speed Of(Event Player) <= 7.505;
		Altitude Of(Event Player) >= 0.100;
		Altitude Of(Event Player) <= 0.145;
		Vertical Speed Of(Event Player) >= 6;
		Event Player.BugJump != 1;
	}

	action
	{
		If(Global.BugBhop);
			Event Player.Bhop = 1;
			Small Message(Event Player, Custom String("Success!"));
		Else;
			Kill(!Event Player.FreeMode ? Event Player : Null, Null);
			Small Message(Event Player, Custom String("{0}: create is disabled", Hero Icon String(Hero(겐지))));
		End;
	}
}

rule("小跳")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		Event Player.Bhop == 1;
		Is Jumping(Event Player) == True;
	}

	action
	{
		Event Player.Bhop = 0;
		Small Message(Event Player, Custom String("Bhop"));
	}
}

rule("爬墙,蹭留")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		Event Player.Climb == 1;
		Is On Wall(Event Player) == True;
	}

	action
	{
		If(Is Button Held(Event Player, Button(Jump)));
			Event Player.Climb = 0;
			Event Player.Jump = 0;
			Small Message(Event Player, Custom String("Climb"));
		Else If(!Global.BugClimb);
			Kill(!Event Player.FreeMode ? Event Player : Null, Null);
			Small Message(Event Player, Custom String("{0}: Multi is disabled", Hero Icon String(Hero(겐지))));
		End;
	}
}

rule("三段")
{
	event
	{
		Ongoing - Each Player;
		All;
		겐지;
	}

	condition
	{
		Global.TripleJump == False;
		Event Player.Jump == 1;
		Vertical Speed Of(Event Player) >= 5.800;
		Is Using Ability 1(Event Player) == False;
		Is On Wall(Event Player) == False;
	}

	action
	{
		Apply Impulse(Event Player, Down, Speed Of(Event Player), To Player, Cancel Contrary Motion);
	}
}