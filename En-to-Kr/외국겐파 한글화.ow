variables {
    global:
        0: A
        1: B
        2: C
        3: DVA
        4: dva
        5: F
        6: G
        7: H
        8: I
        9: J
        10: K
        11: L
        12: Dao
        13: SHIFT
        14: SUPERJUMP
        15: P
        16: Q
        17: R
        18: TQ
        19: TQ1
        20: TQ2
        21: TQ3
        22: EditMode
        23: TQ5
        24: TQ6
        25: kz_xs
        26: killballnumber
        27: pinballnumber
        28: deathjump
        30: save
        32: toplistPlayers
        33: toplistTimes
        34: toplistSortedTimes
        35: kaxiaotiao
        38: NANBA
    player:
        0: A
        1: B
        2: C
        3: D
        4: E
        5: F
        6: G
        7: H
        8: I
        9: J
        10: K
        11: L
        12: ztjs
        14: O
        19: T
        26: TY
        28: paqiang
        31: quick_restart
        32: climbNum
        85: CH
        117: HUB_DOTS_INDEX
}
subroutines {
    0: Sub0
    1: Sub1
    3: KILLBALL
    4: pinball
}
rule ("------------------------------------------------------제작 완료 후 아래 룰들을 비활성화해주세요--------------------------") {
    event {
        Ongoing - Global;
    }
    action {
        Disable Inspector Recording;
        Wait(10, Ignore Condition);
        Enable Inspector Recording;
        Loop;
    }
}

rule ("Hide/Show Guide HUD") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Melee)) == True;
        Event Player == Host Player;
        (Event Player).E >= 1;
    }
    action {
        Wait(0.8, Abort When False);
        Play Effect(Host Player, Buff Impact Sound, Color(White), Event Player, 100);
        If(Compare((Event Player).K, ==, 1));
            Set Player Variable(Event Player, K, 2);
            Small Message(All Players(All Teams), Custom String("가이드 숨김", Null, Null, Null));
        Else;
            Set Player Variable(Event Player, K, 1);
            Small Message(All Players(All Teams), Custom String("가이드 표시", Null, Null, Null));
    }
}

rule ("Clear excess data") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Interact)) == True;
        Is Button Held(Event Player, Button(Melee)) == True;
        Is Button Held(Event Player, Button(Reload)) == True;
        Event Player == Host Player;
    }
    action {
        Set Global Variable(B, 0);
        Set Global Variable(C, 0);
        Set Global Variable(DVA, 0);
        Set Global Variable(dva, 0);
        Set Global Variable(F, 0);
        Set Global Variable(G, 0);
        Set Global Variable(J, 0);
        Set Global Variable(K, 0);
        Set Global Variable(L, 0);
        Set Global Variable(Dao, 0);
        Set Global Variable(SHIFT, 0);
        Set Global Variable(SUPERJUMP, 0);
        Set Global Variable(P, 0);
        Set Global Variable(Q, 0);
        Set Global Variable(R, 0);
        Set Global Variable(TQ1, 0);
        Set Global Variable(NANBA, 0);
        Set Global Variable(TQ2, 0);
        Set Global Variable(TQ3, 0);
        Set Global Variable(save, 0);
        Set Global Variable(kz_xs, 0);
        Big Message(All Players(All Teams), Custom String("데이터 초기화", Null, Null, Null));
        Big Message(All Players(All Teams), Custom String("데이터 초기화", Null, Null, Null));
        Enable Inspector Recording;
    }
}

rule ("Deflect TP") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Ability 2)) == True;
        (Event Player).E == 1;
    }
    action {
        Teleport(Event Player, Add(Position Of(Event Player), Multiply(Facing Direction Of(Event Player), 3)));
    }
}

rule ("Change editing mode") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Ability 1)) == True;
        Event Player == Host Player;
    }
    action {
        Wait(1, Abort When False);
        If(Compare((Event Player).E, ==, 1));
            Set Player Variable(Event Player, E, 2);
            Small Message(Host Player, Custom String("현재 모드: 데스존", Null, Null, Null));
        Else If(Compare((Event Player).E, ==, 2));
            Set Player Variable(Event Player, E, 3);
            Small Message(Host Player, Custom String("현재 모드: 바운싱 볼", Null, Null, Null));
        Else If(Compare((Event Player).E, ==, 3));
            Set Player Variable(Event Player, E, 1);
            Small Message(Host Player, Custom String("현재 모드: 체크포인트", Null, Null, Null));
    }
}

rule ("Change Killing Sphere size (increase)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Ability 2)) == True;
        Is Button Held(Event Player, Button(Jump)) == True;
        Event Player == Host Player;
        (Event Player).E > 1;
    }
    action {
        If(Compare((Event Player).E, ==, 2));
            If(Compare(Count Of(Global.H), >, 0));
                Modify Global Variable At Index(I, Global.J, Add, 0.1);
                Wait(0.1, Ignore Condition);
                Loop If Condition Is True;
                For Global Variable(NANBA, 0, Count Of(Global.H), 1);
                    Destroy Effect(Value In Array(Global.K, Global.NANBA));
                End;
                Set Global Variable(K, Empty Array);
                Call Subroutine(KILLBALL);
            End;
        Else If(Compare((Event Player).E, ==, 3));
            If(Compare(Count Of(Global.TQ), >, 0));
                Modify Global Variable At Index(EditMode, Global.TQ1, Add, 0.1);
                Wait(0.1, Ignore Condition);
                Loop If Condition Is True;
    }
}

rule ("Change Killing Sphere size (decrease)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Ability 2)) == True;
        Is Button Held(Event Player, Button(Crouch)) == True;
        Event Player == Host Player;
        (Event Player).E > 1;
        Is Button Held(Event Player, Button(Interact)) == False;
    }
    action {
        If(Compare(Count Of(Global.H), >, 0));
            If(Compare((Event Player).E, ==, 2));
                Modify Global Variable At Index(I, Global.J, Subtract, 0.1);
                Wait(0.1, Ignore Condition);
                Loop If Condition Is True;
                For Global Variable(NANBA, 0, Count Of(Global.H), 1);
                    Destroy Effect(Value In Array(Global.K, Global.NANBA));
                End;
                Set Global Variable(K, Empty Array);
                Call Subroutine(KILLBALL);
    }
}

rule ("Bouncing Ball strenght") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Ability 2)) == True;
        Is Button Held(Event Player, Button(Crouch)) == True;
        Event Player == Host Player;
        (Event Player).E == 3;
        Is Button Held(Event Player, Button(Interact)) == False;
    }
    action {
        If(Compare(Count Of(Global.TQ), >, 0));
            Modify Global Variable At Index(EditMode, Global.TQ1, Subtract, 0.1);
            Wait(0.1, Ignore Condition);
            Loop If Condition Is True;
    }
}

rule ("Move the Killing sphere (toward)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Ability 2)) == True;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
        Event Player == Host Player;
        (Event Player).E > 1;
    }
    action {
        If(Compare((Event Player).E, ==, 2));
            Skip If(Compare(Global.L, !=, Value In Array(Global.H, Global.J)), 1);
            Chase Global Variable At Rate(L, Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), Add(Distance Between(Position Of(Event Player), Value In Array(Global.H, Global.J)), 5))), 1, Destination and Rate);
            //lbl_0:
            Wait(0.25, Ignore Condition);
            Loop If Condition Is True;
            Stop Chasing Global Variable(L);
            Set Global Variable At Index(H, Global.J, Global.L);
            For Global Variable(NANBA, 0, Count Of(Global.H), 1);
                Destroy Effect(Value In Array(Global.K, Global.NANBA));
            End;
            Set Global Variable(K, Empty Array);
            Call Subroutine(KILLBALL);
        Else If(Compare((Event Player).E, ==, 3));
            Skip If(Compare(Global.TQ3, !=, Value In Array(Global.TQ, Global.TQ1)), 1);
            Chase Global Variable At Rate(TQ3, Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), Add(Distance Between(Position Of(Event Player), Value In Array(Global.TQ, Global.TQ1)), 5))), 1, Destination and Rate);
            //lbl_1:
            Wait(0.25, Ignore Condition);
            Loop If Condition Is True;
            Stop Chasing Global Variable(TQ3);
            Set Global Variable At Index(TQ, Global.TQ1, Global.TQ3);
            For Global Variable(NANBA, 0, Count Of(Global.TQ), 1);
                Destroy Effect(Value In Array(Global.TQ2, Global.NANBA));
            End;
            Set Global Variable(TQ2, Empty Array);
            Call Subroutine(pinball);
    }
}

rule ("Move the Killing sphere (backward)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Ability 2)) == True;
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
        Event Player == Host Player;
        (Event Player).E > 1;
    }
    action {
        If(Compare((Event Player).E, ==, 2));
            Skip If(Compare(Global.L, !=, Value In Array(Global.H, Global.J)), 1);
            Chase Global Variable At Rate(L, Subtract(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), Add(Distance Between(Position Of(Event Player), Value In Array(Global.H, Global.J)), 5))), 1, Destination and Rate);
            //lbl_0:
            Wait(0.25, Ignore Condition);
            Loop If Condition Is True;
            Stop Chasing Global Variable(L);
            Set Global Variable At Index(H, Global.J, Global.L);
            For Global Variable(NANBA, 0, Count Of(Global.H), 1);
                Destroy Effect(Value In Array(Global.K, Global.NANBA));
            End;
            Set Global Variable(K, Empty Array);
            Call Subroutine(KILLBALL);
        Else If(Compare((Event Player).E, ==, 3));
            Skip If(Compare(Global.TQ3, !=, Value In Array(Global.TQ, Global.TQ1)), 1);
            Chase Global Variable At Rate(TQ3, Subtract(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), Add(Distance Between(Position Of(Event Player), Value In Array(Global.TQ, Global.TQ1)), 5))), 1, Destination and Rate);
            //lbl_1:
            Wait(0.25, Ignore Condition);
            Loop If Condition Is True;
            Stop Chasing Global Variable(TQ3);
            Set Global Variable At Index(TQ, Global.TQ1, Global.TQ3);
            For Global Variable(NANBA, 0, Count Of(Global.TQ), 1);
                Destroy Effect(Value In Array(Global.TQ2, Global.NANBA));
            End;
            Set Global Variable(TQ2, Empty Array);
            Call Subroutine(pinball);
    }
}

rule ("Edit mode") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Has Spawned(Event Player) == True;
    }
    action {
        "玩家E：编辑模式"
        Set Player Variable(Event Player, E, 1);
        Set Player Variable(Event Player, K, 1);
    }
}

rule ("Create Checkpoint") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Interact)) == True;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
        Event Player == Host Player;
    }
    action {
        If(Compare((Event Player).E, ==, 1));
            Modify Global Variable(A, Append To Array, Subtract(Position Of(Event Player), Vector(0, 0, 0)));
            Set Global Variable(B, Subtract(Count Of(Global.A), 1));
            Small Message(All Players(All Teams), Custom String("새로운 체크포인트 생성", Null, Null, Null));
        Else If(Compare((Event Player).E, ==, 2));
            If(Compare((Event Player).A, ==, 0));
                Big Message(All Players(All Teams), Custom String("0단계에 데스존 생성 불가", Null, Null, Null));
            Else;
                Modify Global Variable(H, Append To Array, Position Of(Event Player));
                Modify Global Variable(killballnumber, Append To Array, (Event Player).A);
                Set Global Variable(J, Subtract(Count Of(Global.H), 1));
                Set Global Variable At Index(I, Global.J, 5);
                For Global Variable(NANBA, 0, Count Of(Global.H), 1);
                    Destroy Effect(Value In Array(Global.K, Global.NANBA));
                End;
                Set Global Variable(K, Empty Array);
                Call Subroutine(KILLBALL);
                Set Global Variable(L, Value In Array(Global.H, Global.J));
                Big Message(All Players(All Teams), Custom String("{0}단계에 새로운 데스존 생성", (Event Player).A, Null, Null));
            End;
        Else If(Compare((Event Player).E, ==, 3));
            If(Compare((Event Player).A, ==, 0));
                Big Message(All Players(All Teams), Custom String("0단계에 바운싱 볼 생성 불가", Null, Null, Null));
            Else;
                Modify Global Variable(TQ, Append To Array, Position Of(Event Player));
                Set Global Variable(TQ1, Subtract(Count Of(Global.TQ), 1));
                Set Global Variable At Index(EditMode, Global.TQ1, 10);
                Set Global Variable At Index(TQ5, Global.TQ1, False);
                Set Global Variable At Index(TQ6, Global.TQ1, False);
                For Global Variable(NANBA, 0, Count Of(Global.TQ), 1);
                    Destroy Effect(Value In Array(Global.TQ2, Global.NANBA));
                End;
                Set Global Variable(TQ2, Empty Array);
                Call Subroutine(pinball);
                Set Global Variable(TQ3, Value In Array(Global.TQ, Global.TQ1));
                Modify Global Variable(pinballnumber, Append To Array, (Event Player).A);
                Big Message(All Players(All Teams), Custom String("{0}단계에 새로운 바운싱 볼 생성", (Event Player).A, Null, Null));
    }
}

rule ("Delete Checkpoint") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Interact)) == True;
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
        Event Player == Host Player;
    }
    action {
        If(Compare((Event Player).E, ==, 1));
            Modify Global Variable(A, Remove From Array By Index, Global.B);
            Modify Global Variable(C, Remove From Array By Index, Global.B);
            Skip If(Compare(Global.B, <=, 0), 1);
            Modify Global Variable(B, Subtract, 1);
            //lbl_0:
            Small Message(All Players(All Teams), Custom String("체크포인트 제거", Null, Null, Null));
        Else If(And(Compare((Event Player).E, ==, 2), Compare(Count Of(Global.H), !=, 0)));
            Modify Global Variable(H, Remove From Array By Index, Global.J);
            Modify Global Variable(I, Remove From Array By Index, Global.J);
            Modify Global Variable(killballnumber, Remove From Array By Index, Global.J);
            Destroy Effect(Value In Array(Global.K, Global.J));
            Modify Global Variable(K, Remove From Array By Index, Global.J);
            Skip If(Compare(Global.J, <=, 0), 1);
            Modify Global Variable(J, Subtract, 1);
            //lbl_1:
            Set Global Variable(L, Value In Array(Global.H, Global.J));
        Else If(And(Compare((Event Player).E, ==, 3), Compare(Count Of(Global.TQ), !=, 0)));
            Modify Global Variable(TQ, Remove From Array By Index, Global.TQ1);
            Modify Global Variable(EditMode, Remove From Array By Index, Global.TQ1);
            Modify Global Variable(TQ5, Remove From Array By Index, Global.TQ1);
            Modify Global Variable(TQ6, Remove From Array By Index, Global.TQ1);
            Destroy Effect(Value In Array(Global.TQ2, Global.TQ1));
            Modify Global Variable(TQ2, Remove From Array By Index, Global.TQ1);
            Modify Global Variable(pinballnumber, Remove From Array By Index, Global.TQ1);
            Skip If(Compare(Global.TQ1, <=, 0), 1);
            Modify Global Variable(TQ1, Subtract, 1);
            //lbl_2:
            Set Global Variable(TQ3, Value In Array(Global.TQ, Global.TQ1));
    }
}

rule ("Move checkpoint") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Ultimate)) == True;
        Is Button Held(Event Player, Button(Interact)) == True;
        Event Player == Host Player;
    }
    action {
        Small Message(All Players(All Teams), If-Then-Else(Compare(Count Of(Value In Array(Global.A, Global.B)), !=, 0), Custom String("{0}단계 제거", Global.B, Null, Null), Custom String("", Null, Null, Null)));
        Set Global Variable At Index(A, Global.B, Subtract(Position Of(Event Player), Vector(0, 0, 0)));
        Small Message(All Players(All Teams), Custom String("현재위치로 단계 이동", Null, Null, Null));
    }
}

rule ("Add a teleport") {
    event {
        Ongoing - Global;
    }
    condition {
        Is Button Held(Host Player, Button(Interact)) == True;
        Is Button Held(Host Player, Button(Reload)) == True;
        Count Of(Global.A) > 1;
        (Host Player).E == 1;
        Global.B > 0;
        Is Button Held(Host Player, Button(Melee)) == False;
    }
    action {
        Abort If(Is Button Held(Host Player, Button(Melee)));
        Set Global Variable At Index(A, Global.B, Array(If-Then-Else(Compare(Count Of(Value In Array(Global.A, Global.B)), !=, 0), First Of(Value In Array(Global.A, Global.B)), Value In Array(Global.A, Global.B)), Position Of(Host Player)));
        Small Message(All Players(All Teams), Custom String("{0}단계에 텔레포트 추가", Global.B, Null, Null));
    }
}

rule ("Swap selected point (back)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Interact)) == True;
        Is Button Held(Event Player, Button(Crouch)) == True;
        Event Player == Host Player;
    }
    action {
        If(Compare((Event Player).E, ==, 1));
            Skip If(Compare(Global.B, <=, 0), 1);
            Modify Global Variable(B, Subtract, 1);
            //lbl_0:
        Else If(Compare((Event Player).E, ==, 2));
            Skip If(Compare(Global.J, <=, 0), 2);
            Modify Global Variable(J, Subtract, 1);
            Set Global Variable(L, Value In Array(Global.H, Global.J));
            //lbl_1:
        Else If(Compare((Event Player).E, ==, 3));
            Skip If(Compare(Global.TQ1, <=, 0), 2);
            Modify Global Variable(TQ1, Subtract, 1);
            Set Global Variable(TQ3, Value In Array(Global.TQ, Global.TQ1));
            //lbl_2:
    }
}

rule ("Swap selected point (forward)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Interact)) == True;
        Is Button Held(Event Player, Button(Jump)) == True;
        Event Player == Host Player;
    }
    action {
        If(Compare((Event Player).E, ==, 1));
            Skip If(Compare(Global.B, ==, Subtract(Count Of(Global.A), 1)), 1);
            Modify Global Variable(B, Add, 1);
            //lbl_0:
        Else If(Compare((Event Player).E, ==, 2));
            Skip If(Compare(Global.J, ==, Subtract(Count Of(Global.H), 1)), 2);
            Modify Global Variable(J, Add, 1);
            Set Global Variable(L, Value In Array(Global.H, Global.J));
            //lbl_1:
        Else If(Compare((Event Player).E, ==, 3));
            Skip If(Compare(Global.TQ1, ==, Subtract(Count Of(Global.TQ), 1)), 2);
            Modify Global Variable(TQ1, Add, 1);
            Set Global Variable(TQ3, Value In Array(Global.TQ, Global.TQ1));
            //lbl_2:
    }
}

rule ("Bouncing Ball turn on/off ultimate") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Ultimate)) == True;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
        Event Player == Host Player;
        (Event Player).E == 3;
        Count Of(Global.TQ) != 0;
    }
    action {
        Wait(1, Ignore Condition);
        If(Compare(Value In Array(Global.TQ5, Global.TQ1), ==, False));
            Set Global Variable At Index(TQ5, Global.TQ1, True);
        Else If(Compare(Value In Array(Global.TQ5, Global.TQ1), ==, True));
            Set Global Variable At Index(TQ5, Global.TQ1, False);
    }
}

rule ("Bouncing Ball turn on/off dash") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
        Is Button Held(Event Player, Button(Ultimate)) == True;
        Event Player == Host Player;
        (Event Player).E == 3;
        Count Of(Global.TQ) != 0;
    }
    action {
        Wait(1, Ignore Condition);
        If(Compare(Value In Array(Global.TQ6, Global.TQ1), ==, False));
            Set Global Variable At Index(TQ6, Global.TQ1, True);
        Else If(Compare(Value In Array(Global.TQ6, Global.TQ1), ==, True));
            Set Global Variable At Index(TQ6, Global.TQ1, False);
    }
}

rule("Guide HUD")
{
	event
	{
		Ongoing - Global;
	}

	action
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{{0}}", Host Player.K, Append To Array(Append To Array(
			Append To Array(Append To Array(Empty Array, 0), Custom String("{0}\r\n{1}\r\n{2}", Custom String("{0}+LMB=체크포인트 생성\r\n{0}+RMB=현재 체크포인트 제거\r\n{0}+{1}=체크포인트에 텔레포트 추가", Input Binding String(Button(Interact)), Input Binding String(Button(Reload)), Null),
			Custom String("{0}+{1}=현재 위치에 체크포인트 설정\r\n{0}+{2}=이전 체크포인트 선택", Input Binding String(Button(Interact)), Input Binding String(Button(Ultimate)), Input Binding String(Button(Crouch))),
			Custom String("{0}+Jump=다음 체크포인트 선택\r\n{0}+{1}=모든 체크포인트 보기", Input Binding String(Button(Interact)), Input Binding String(Button(Ability 1)), Null))), Custom String(
			"{0}\r\n{1}\r\n{2}", Custom String("{0}+LMB=데스존 생성\r\n{0}+RMB=선택한 데스존 제거\r\n{0}+{1}=이전 데스존 선택", Input Binding String(Button(Interact)), Input Binding String(Button(Crouch)), Null),
			Custom String("{0}+Jump=다음 데스존 선택\r\n{1}+Jump=데스존 크기 증가\r\n{1}+{2}=데스존 크기 감소", Input Binding String(Button(Interact)), Input Binding String(Button(Ability 2)), Input Binding String(Button(Crouch))),
			Custom String("{0}+LMB=앞으로 이동\r\n{0}+RMB=뒤로 이동", Input Binding String(Button(Ability 2)), Null, Null))), Custom String("{0}\r\n{1}\r\n{2}", Custom String("{0}+LMB=바운싱볼 생성\r\n{0}+RMB=선택한 바운싱볼 제거\r\n{0}+{1}=이전 바운싱볼 선택", Input Binding String(Button(Interact)), Input Binding String(Button(Crouch)), Null),
			Custom String("{0}+Jump=다음 바운싱볼 선택\r\n{1}+Jump=바운싱볼 힘 증가\r\n{1}+{2}=바운싱볼 힘 감소", Input Binding String(Button(Interact)), Input Binding String(Button(Ability 2)), Input Binding String(Button(Crouch))),
			Custom String("{0}+LMB=앞으로 이동\r\n{0}+RMB=뒤로 이동", Input Binding String(Button(Ability 2)), Null, Null)))[Host Player.E], Custom String("Hold {0}: 지침 열기", Input Binding String(Button(Melee)), Null, Null)), Right, -2, Color(White), Color(White), Color(Yellow), Visible To and String,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{{0}}", Host Player.K, Custom String("{0}+LMB=다음단계\r\n{0}+RMB=이전단계\r\n연습모드에서:\r\n{1}=Trough Wall(순간이동?벽통과?)", Input Binding String(Button(Crouch)), Input Binding String(Button(Ability 2)), Null), Custom String("")), Right, -1, Color(
			White), Color(White), Color(Green), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{{0}}", Host Player.K, Custom String("Hold {0}: 지침 닫기\r\nCreated by: 易忘#51876\r\nUdpated by: 五里雾中#51574\r\nTranslated by: Xerteks#2929,FATHER\r\n번역: 훈제김치", Input Binding String(Button(Melee)), Null, Null),
			Custom String("")), Right, 0, Color(White), Color(White), Color(Red), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{{0}}", Host Player.K, Custom String("{0}\r\n{1}{2}\r\n{3}",
			Custom String("맵 저장법:\r\n1.{0}+{1}+{2}로 데이터 초기화", Input Binding String(Button(Interact)), Input Binding String(Button(Melee)), Input Binding String(Button(Reload))), Custom String(
			"2.워크샵 인스펙터 열기 - variable target을 GLOBAL로 설정 - [x]클릭\r\n3.워크샵 에디터 열기 - [Checkpoint | Position] 열기"),
			Custom String("- 노란색[+] 버튼 클릭\r\n4.제작전용 룰 비활성화\r\n{0}{1}\r\n{2}", Custom String(
			"5. ESC→대기실 보기→설정→코드 공유→새로운 코드 생성→코드 복사\r\n6.워크샵 에디터 열기 - \"TEXT\"에 맵 코드복사,"),
			Custom String("제작자 닉네임 작성 \r\n7.ESC→대기실 보기→설정→코드 공유→기존 코드에 업로드\r\n{0}",
			Custom String(" 5단계에서 만든 코드를 붙여넣습니다.")), Custom String("\n"))), Custom String("")), Left, -12, Color(White),
			Color(White), Color(Yellow), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("{{0}}", Host Player.K, Append To Array(Append To Array(Append To Array(
			Append To Array(Empty Array, 0), Custom String("Hold {0}: 제작 모드 변경\r\n현재 모드: 체크포인트", Input Binding String(Button(Ability 1)), Null, Null)),
			Custom String("Hold {0}: 제작 모드 변경\r\n현재 모드: 데스존", Input Binding String(Button(Ability 1)), Null, Null)), Custom String("Hold {0}: 제작 모드 변경\r\n현재 모드: 바운싱볼", Input Binding String(Button(Ability 1)), Null, Null))[Host Player.E], Custom String(
			"Guide HUD has been closed")), Null, Append To Array(Append To Array(Append To Array(Append To Array(Empty Array,
			Custom String("")), Custom String("")), Custom String("")), Custom String("Hold {0}+LMB=궁극기 토글\r\nHold {0}+RMB=질풍참 토글", Input Binding String(Button(Ultimate)), Null, Null))[Host Player.E], Left, -6, Color(Red), Color(White), Color(
			Orange), Visible To and String, Default Visibility);
	}
}

rule ("Guide HUD effects") {
    event {
        Ongoing - Global;
    }
    action {
        Create Icon(All Players(All Teams), Add(Value In Array(Global.A, Global.B), Vector(0, 0.6, 0)), Arrow: Down, Visible To and Position, Color(Red), True);
        Create In-World Text(All Players(All Teams), Custom String("단계 선택", Null, Null, Null), Add(Value In Array(Global.A, Global.B), Vector(0, 0.5, 0)), 1.6, Do Not Clip, Visible To Position and String, Color(Red), Default Visibility);
        "createEffect(getAllPlayers(), Effect.SPHERE, Color.RED, H[J], I[J], EffectReeval.VISIBILITY_POSITION_AND_RADIUS)"
        Create Effect(All Players(All Teams), Good Aura, Color(Purple), Value In Array(Global.TQ, Global.TQ1), 1, Visible To Position and Radius);
        "轻易别打开，动作太长会"
        Create HUD Text(All Players(All Teams), Value In Array(Append To Array(Append To Array(Append To Array(Append To Array(Empty Array, 0), Custom String("{0}단계 선택", Global.B, Null, Null)), Custom String("현재 데스존 반지름: {0}", Value In Array(Global.I, Global.J), Null, Null)), Custom String("현재 바운싱 볼 힘: {0}", Value In Array(Global.EditMode, Global.TQ1), Null, Null)), (Host Player).E), Null, Value In Array(Append To Array(Append To Array(Append To Array(Append To Array(Empty Array, Custom String("", Null, Null, Null)), Custom String("", Null, Null, Null)), Custom String("", Null, Null, Null)), Custom String("현재 바운싱 볼 궁극기: {0}\r\n현재 바운싱 볼 질풍참: {1}", Value In Array(Global.TQ5, Global.TQ1), Value In Array(Global.TQ6, Global.TQ1), Null)), (Host Player).E), Top, -14, Color(Red), Color(White), Color(Orange), Visible To and String, Default Visibility);
        Create In-World Text(All Players(All Teams), Custom String("데스존 선택", Null, Null, Null), Value In Array(Global.H, Global.J), 1.6, Do Not Clip, Visible To Position and String, Color(Sky Blue), Default Visibility);
        Create Effect(All Players(All Teams), Orb, Color(Red), Global.L, 1, Visible To Position and Radius);
        Create In-World Text(Host Player, String("{0} m", Distance Between(Host Player, Global.L), Null, Null), Subtract(Global.L, Vector(0, 1.5, 0)), 1.5, Do Not Clip, Visible To Position and String, Color(Red), Default Visibility);
        Create Icon(All Players(All Teams), Add(Value In Array(Global.H, Global.J), Vector(0, 0.6, 0)), Arrow: Down, Visible To and Position, Color(Red), True);
    }
}

rule ("Hide excess checkpoints") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Interact)) == True;
        Is Button Held(Event Player, Button(Ability 1)) == True;
        Event Player == Host Player;
    }
    action {
        For Global Variable(B, Subtract(Count Of(Global.C), 1), 0, -1);
            Destroy Effect(Value In Array(Global.C, Global.B));
            Modify Global Variable(C, Remove From Array By Index, Global.B);
        End;
        Set Global Variable(B, -2);
    }
}

rule ("Show checkpoints") {
    event {
        Ongoing - Global;
    }
    condition {
        Global.B == -2;
    }
    action {
        For Global Variable(B, 0, Count Of(Global.A), 1);
            Create Effect(All Players(All Teams), Ring, Color(Red), Value In Array(Global.A, Global.B), 1, Visible To);
            Modify Global Variable(C, Append To Array, Last Created Entity);
        End;
    }
}

rule ("Jump to next checkpoint") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Crouch)) == True;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
        (Event Player).A < Subtract(Count Of(Global.A), 1);
    }
    action {
        Modify Player Variable(Event Player, A, Add, 1);
        Teleport(Event Player, Value In Array(Global.A, (Event Player).A));
        Modify Global Variable At Index(P, (Event Player).A, Append To Array, Event Player);
        Modify Global Variable At Index(P, Subtract((Event Player).A, 1), Remove From Array By Value, Event Player);
    }
}

rule ("Jump to previous checkpoint") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Crouch)) == True;
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
        (Event Player).A != 0;
    }
    action {
        Teleport(Event Player, Value In Array(Global.A, Subtract((Event Player).A, 1)));
        Modify Player Variable(Event Player, A, Subtract, 1);
        Modify Global Variable At Index(P, (Event Player).A, Append To Array, Event Player);
        Modify Global Variable At Index(P, Add((Event Player).A, 1), Remove From Array By Value, Event Player);
    }
}

rule ("------------------------------------------------------제작 완료 후 위의 룰들을 비활성화해주세요--------------------------") {
    event {
        Ongoing - Global;
    }
}

rule ("Setup and Variables") {
    event {
        Ongoing - Global;
    }
    action {
        Disable Inspector Recording;
        Disable Built-In Game Mode Respawning(All Players(All Teams));
        Disable Built-In Game Mode Completion;
        Disable Built-In Game Mode Scoring;
        Disable Built-In Game Mode Music;
        Pause Match Time;
        Set Global Variable(Dao, Empty Array);
        Set Global Variable(SHIFT, Empty Array);
        Set Global Variable(pinballnumber, Empty Array);
        Set Global Variable(killballnumber, Empty Array);
        Set Global Variable(A, Empty Array);
        Set Global Variable(F, Empty Array);
        Set Global Variable(G, Empty Array);
        Set Global Variable(H, Empty Array);
        Set Global Variable(I, Empty Array);
        Set Global Variable(K, Empty Array);
        Set Global Variable(J, 0);
        Set Global Variable(Q, Empty Array);
        Set Global Variable(TQ, Empty Array);
        Set Global Variable(TQ2, Empty Array);
        Set Global Variable(EditMode, Empty Array);
        Set Global Variable(TQ1, 0);
        Set Global Variable(TQ5, Empty Array);
        Set Global Variable(TQ6, Empty Array);
        Wait(1, Ignore Condition);
        Set Global Variable(B, Subtract(Count Of(Global.A), 1));
        Call Subroutine(KILLBALL);
        Wait(2, Ignore Condition);
        Call Subroutine(pinball);
        If(Compare(Current Game Mode, ==, Game Mode(연습 전투)));
            Create HUD Text(All Players(All Teams), Custom String("", Null, Null, Null), Null, Custom String("{0} {1} {2}", Custom String("서버 재시작까지:", Null, Null, Null), Subtract(270, Round To Integer(Divide(Total Time Elapsed, 60), Down)), Custom String("분", Null, Null, Null)), Right, -15, Color(White), Color(White), Color(Red), Visible To and String, Default Visibility);
        Else;
            Create HUD Text(All Players(All Teams), Custom String("", Null, Null, Null), Null, Custom String("{0} {1} {2}", Custom String("서버 재시작까지:", Null, Null, Null), Subtract(90, Round To Integer(Divide(Total Time Elapsed, 60), Down)), Custom String("분", Null, Null, Null)), Right, -15, Color(White), Color(White), Color(Red), Visible To and String, Default Visibility);
        End;
        Set Global Variable(save, Empty Array);
        "Top 5 best times hud text"
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Top 5 ", Null, Null, Null), Right, -8, Null, Null, Color(White), Visible To and String, Default Visibility);
        "1th Place"
        Create HUD Text(If-Then-Else(Compare(Value In Array(Global.toplistSortedTimes, 1), !=, Null), All Players(All Teams), Null), Hero Icon String(Hero(겐지)), Value In Array(Global.toplistPlayers, Index Of Array Value(Global.toplistTimes, Value In Array(Global.toplistSortedTimes, 1))), Custom String("{0} sec", Value In Array(Global.toplistSortedTimes, 1), Null, Null), Right, -7, Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187, 255), Visible To and String, Default Visibility);
        "2nd Place"
        Create HUD Text(If-Then-Else(Compare(Value In Array(Global.toplistSortedTimes, 2), !=, Null), All Players(All Teams), Null), Hero Icon String(Hero(겐지)), Value In Array(Global.toplistPlayers, Index Of Array Value(Global.toplistTimes, Value In Array(Global.toplistSortedTimes, 2))), Custom String("{0} sec", Value In Array(Global.toplistSortedTimes, 2), Null, Null), Right, -6, Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187, 255), Visible To and String, Default Visibility);
        "3rd Place"
        Create HUD Text(If-Then-Else(Compare(Value In Array(Global.toplistSortedTimes, 3), !=, Null), All Players(All Teams), Null), Hero Icon String(Hero(겐지)), Value In Array(Global.toplistPlayers, Index Of Array Value(Global.toplistTimes, Value In Array(Global.toplistSortedTimes, 3))), Custom String("{0} sec", Value In Array(Global.toplistSortedTimes, 3), Null, Null), Right, -5, Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187, 255), Visible To and String, Default Visibility);
        "4th Place"
        Create HUD Text(If-Then-Else(Compare(Value In Array(Global.toplistSortedTimes, 4), !=, Null), All Players(All Teams), Null), Hero Icon String(Hero(겐지)), Value In Array(Global.toplistPlayers, Index Of Array Value(Global.toplistTimes, Value In Array(Global.toplistSortedTimes, 4))), Custom String("{0} sec", Value In Array(Global.toplistSortedTimes, 4), Null, Null), Right, -4, Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187, 255), Visible To and String, Default Visibility);
        "5th Place"
        Create HUD Text(If-Then-Else(Compare(Value In Array(Global.toplistSortedTimes, 5), !=, Null), All Players(All Teams), Null), Hero Icon String(Hero(겐지)), Value In Array(Global.toplistPlayers, Index Of Array Value(Global.toplistTimes, Value In Array(Global.toplistSortedTimes, 5))), Custom String("{0} sec", Value In Array(Global.toplistSortedTimes, 5), Null, Null), Right, -3, Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187, 255), Visible To and String, Default Visibility);
        "Other player best times hud text"
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Other", Null, Null, Null), Right, -2, Null, Null, Color(White), Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("                                                   \r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", Null, Null, Null), Top, -6, Null, Null, Color(Orange), Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}+{1} | 연습모드", Input Binding String(Button(Reload)), Input Binding String(Button(Melee)), Null), Right, -12, Null, Null, Color(Purple), Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}+{1}+{2} | 초기화", Input Binding String(Button(Crouch)), Input Binding String(Button(Ability 2)), Input Binding String(Button(Interact))), Right, -11, Null, Null, Color(Aqua), Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Hold {0} | 관전", Input Binding String(Button(Interact)), Null, Null), Right, -11, Null, Null, Color(Sky Blue), Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Hold {0} |  제자리 활성화", Input Binding String(Button(Reload)), Null, Null), Right, -10, Null, Null, Color(Yellow), Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} | 제자리", Input Binding String(Button(Reload)), Null, Null), Right, -9, Null, Null, Color(Orange), Visible To and String, Default Visibility);
        Set Global Variable(kz_xs, Workshop Setting Toggle(Custom String("확장 기능", Null, Null, Null), Custom String("시간제한", Null, Null, Null), False, 0));
    }
}

rule ("Checkpoint | Effect |-------------------------------------------------SUB0") {
    event {
        Subroutine;
        Sub0;
    }
    action {
        Create Effect(Event Player, Ring, Color(Sky Blue), If-Then-Else(Compare(Count Of(Value In Array(Global.A, (Event Player).A)), !=, 0), Value In Array(Value In Array(Global.A, (Event Player).A), 1), Value In Array(Global.A, (Event Player).A)), 1, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, B, 0, Last Created Entity);
        Create Effect(Event Player, Ring, Color(Lime Green), Value In Array(Global.A, Add((Event Player).A, 1)), 1, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, B, 1, Last Created Entity);
        Create Effect(Event Player, Light Shaft, Color(White), Value In Array(Global.A, Add((Event Player).A, 1)), 1, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, B, 2, Last Created Entity);
        Create Icon(Event Player, Add(Value In Array(Global.A, Add((Event Player).A, 1)), Vector(0, 1, 0)), Arrow: Down, Visible To and Position, Color(Sky Blue), True);
        Set Player Variable At Index(Event Player, B, 3, Last Created Entity);
        Create In-World Text(Event Player, Custom String("다음 단계", Null, Null, Null), Value In Array(Global.A, Add((Event Player).A, 1)), 1.5, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
        Set Player Variable At Index(Event Player, B, 4, Last Text ID);
    }
}

rule ("Checkpoint | Start the game |-------------------------------------SUB1") {
    event {
        Subroutine;
        Sub1;
    }
    action {
        If(Compare(Count Of(Global.A), !=, 0));
            If(And(Array Contains(Global.save, Custom String("{0}", Event Player, Null, Null)), Compare(Global.kz_xs, ==, False)));
                "if \"{0}\".format(eventPlayer) in save == true:"
                Set Player Variable(Event Player, A, Value In Array(Global.save, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1)));
                Set Player Variable(Event Player, D, Value In Array(Global.save, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 2)));
                Set Global Variable At Index(save, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 3), Event Player);
                Set Global Variable At Index(save, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 4), Total Time Elapsed);
                Set Global Variable At Index(save, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 5), 0);
                Set Global Variable At Index(save, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 6), 0);
                Teleport(Event Player, Add(Value In Array(Global.A, Value In Array(Global.save, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1))), Vector(0, 1, 0)));
            Else;
                Teleport(Event Player, Add(First Of(Global.A), Vector(0, 1, 0)));
                Set Player Variable(Event Player, A, 0);
                Set Player Variable(Event Player, D, 0);
                Stop Chasing Player Variable(Event Player, ztjs);
                Set Player Variable(Event Player, ztjs, 0);
                Modify Global Variable(save, Append To Array, Array(Custom String("{0}", Event Player, Null, Null), (Event Player).A, (Event Player).D, Event Player, Total Time Elapsed, 0, 0));
            End;
        End;
        Chase Player Variable At Rate(Event Player, D, 9999999, 1, Destination and Rate);
        Set Player Variable(Event Player, G, 0);
        Set Player Variable(Event Player, H, Empty Array);
        If(Compare((Event Player).E, <, 1));
            Set Ability 1 Enabled(Event Player, False);
            Set Ultimate Ability Enabled(Event Player, False);
        Else;
            Set Ability 1 Enabled(Event Player, True);
            Set Ultimate Ability Enabled(Event Player, True);
            Set Ultimate Charge(Event Player, 100);
        End;
        Set Status(Event Player, Null, Phased Out, 9999);
        Set Status(Event Player, Null, Invincible, 9999);
        Modify Global Variable At Index(P, (Event Player).A, Append To Array, Event Player);
        Set Player Variable(Event Player, C, 0);
    }
}

rule ("Checkpoint | Killing Sphere effect |-------------------------------------SUB") {
    event {
        Subroutine;
        KILLBALL;
    }
    action {
        Abort If(Compare(Global.H, ==, Empty Array));
        Set Global Variable(NANBA, 0);
        Create Effect(Sorted Array(Value In Array(Global.P, First Of(Global.killballnumber)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 1);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 1)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 2);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 2)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 3);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 3)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 4);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 4)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 5);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 5)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 6);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 6)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 7);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 7)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 8);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 8)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 9);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 9)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 10);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 10)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 11);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 11)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 12);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 12)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 13);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 13)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 14);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 14)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 15);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 15)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 16);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 16)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 17);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 17)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 18);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 18)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 19);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 19)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 20);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 20)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 21);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 21)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 22);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 22)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 23);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 23)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 24);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 24)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 25);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 25)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 26);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 26)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 27);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 27)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 28);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 28)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 29);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 29)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 30);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 30)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 31);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 31)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 32);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 32)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 33);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 33)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 34);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 34)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 35);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 35)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 36);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 36)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 37);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 37)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 38);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 38)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 39);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 39)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 40);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 40)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 41);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 41)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 42);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 42)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 43);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 43)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 44);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 44)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 45);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 45)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 46);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 46)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 47);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 47)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 48);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 48)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 49);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 49)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
        Set Global Variable(NANBA, 50);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.killballnumber, 50)), Current Array Element), Sphere, Color(Blue), Value In Array(Global.H, Global.NANBA), Value In Array(Global.I, Global.NANBA), Visible To);
        Modify Global Variable(K, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.H), 1)));
    }
}

rule ("Checkpoint | Bouncing Ball effect |-------------------------------------SUB") {
    event {
        Subroutine;
        pinball;
    }
    action {
        Abort If(Compare(Global.TQ, ==, Empty Array));
        Set Global Variable(NANBA, 0);
        Create Effect(Sorted Array(Value In Array(Global.P, First Of(Global.pinballnumber)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 1);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 1)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 2);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 2)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 3);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 3)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 4);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 4)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 5);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 5)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 6);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 6)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 7);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 7)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 8);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 8)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 9);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 9)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 10);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 10)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 11);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 11)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 12);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 12)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 13);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 13)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 14);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 14)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 15);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 15)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 16);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 16)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 17);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 17)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 18);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 18)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 19);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 19)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 20);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 20)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 21);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 21)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 22);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 22)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 23);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 23)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 24);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 24)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 25);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 25)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 26);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 26)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 27);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 27)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 28);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 28)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 29);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 29)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 30);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 30)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 31);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 31)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 32);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 32)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 33);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 33)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 34);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 34)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 35);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 35)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 36);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 36)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 37);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 37)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 38);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 38)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 39);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 39)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 40);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 40)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 41);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 41)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 42);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 42)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 43);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 43)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 44);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 44)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 45);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 45)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 46);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 46)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 47);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 47)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 48);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 48)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 49);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 49)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 50);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 50)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 51);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 51)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 52);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 52)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 53);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 53)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 54);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 54)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 55);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 55)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 56);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 56)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 57);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 57)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 58);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 58)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 59);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 59)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 60);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 60)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 61);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 61)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 62);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 62)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 63);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 63)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 64);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 64)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 65);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 65)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 66);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 66)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 67);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 67)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 68);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 68)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 69);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 69)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 70);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 70)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 71);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 71)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 72);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 72)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 73);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 73)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 74);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 74)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
        Set Global Variable(NANBA, 75);
        Create Effect(Sorted Array(Value In Array(Global.P, Value In Array(Global.pinballnumber, 75)), Current Array Element), Orb, Color(Green), Value In Array(Global.TQ, Global.NANBA), 1, Visible To);
        Modify Global Variable(TQ2, Append To Array, Last Created Entity);
        Abort If(Compare(Global.NANBA, ==, Subtract(Count Of(Global.TQ), 1)));
    }
}

rule ("Checkpoint | Position <---------------------------------------------------------------------------- 여기에 붙여넣으세요!") {
    event {
        Ongoing - Global;
    }
}

rule ("Checkpoint | HUD") {
    event {
        Ongoing - Each Player;
        All;
        겐지;
    }
    condition {
        Has Spawned(Event Player) == True;
    }
    action {
        Set Damage Dealt(Event Player, 0);
        If(Not(Array Contains(Global.Q, Event Player)));
            Create HUD Text(Event Player, Null, Null, Custom String("{0} {1}", Custom String("level ", Null, Null, Null), Custom String("{0} / {1}", (Event Player).A, Subtract(Count Of(Global.A), 1), Null), Null), Top, -13, Null, Null, Color(White), Visible To and String, Default Visibility);
            Create HUD Text(Event Player, Null, Null, Custom String("{0} {1} {2}", Custom String("Time", Null, Null, Null), String("{0} sec", (Event Player).D, Null, Null), If-Then-Else(Global.kz_xs, Custom String("| time limit: {0}", (Event Player).L, Null, Null), Custom String("", Null, Null, Null))), Left, -2, Null, Null, Color(White), Visible To and String, Default Visibility);
        End;
        Modify Global Variable(Q, Append To Array, Event Player);
        "子程序1为游戏的初始化设置"
        Call Subroutine(Sub1);
        Enable Death Spectate All Players(Event Player);
        Enable Death Spectate Target HUD(Event Player);
        "玩家F：自杀防止复活"
        Set Player Variable(Event Player, F, 0);
        "玩家I：教程HUD"
        Set Player Variable(Event Player, I, 2);
        "玩家J：爬墙提示HUD"
        Set Player Variable(Event Player, J, 2);
        "子程序0为检查点效果显示"
        Call Subroutine(Sub0);
    }
}

rule ("Checkpoint | Arrived") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Distance Between(Event Player, Value In Array(Global.A, Add((Event Player).A, 1))) <= 1.4;
        (Event Player).A < Subtract(Count Of(Global.A), 1);
        Is On Ground(Event Player) == True;
        Or(Compare((Event Player).E, >=, 1), Compare((Event Player).C, ==, 0)) == True;
    }
    action {
        Modify Player Variable(Event Player, A, Add, 1);
        If(Global.kz_xs);
            Small Message(Event Player, Custom String("Arrived at {0}/{1}", (Event Player).A, Subtract(Count Of(Global.A), 1), Null));
        Else;
            Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1));
            Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1));
            Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1));
            Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1));
            Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1));
            Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1));
            Modify Global Variable(save, Remove From Array By Value, Custom String("{0}", Event Player, Null, Null));
            Modify Global Variable(save, Append To Array, Array(Custom String("{0}", Event Player, Null, Null), (Event Player).A, (Event Player).D, Event Player, Total Time Elapsed, 0, 0));
            Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 100);
            Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Add(Value In Array(Global.A, (Event Player).A), Vector(0, 1.5, 0)), 4);
            Big Message(Event Player, Custom String("{0} {1}", Custom String("Arrived at", Null, Null, Null), Custom String("{0} / {1}", (Event Player).A, Subtract(Count Of(Global.A), 1), Null), Null));
        End;
        Modify Global Variable At Index(P, (Event Player).A, Append To Array, Event Player);
        Modify Global Variable At Index(P, Subtract((Event Player).A, 1), Remove From Array By Value, Event Player);
        If(Compare((Event Player).E, <, 1));
            Set Ultimate Ability Enabled(Event Player, False);
            Set Ability 1 Enabled(Event Player, False);
        End;
        Abort If(Compare((Event Player).E, >=, 1));
        If(Compare((Event Player).A, >=, Subtract(Count Of(Global.A), 1)));
            Set Ability 1 Enabled(Event Player, True);
            Set Ultimate Ability Enabled(Event Player, True);
            Set Ultimate Charge(Event Player, 100);
            Stop Chasing Player Variable(Event Player, D);
            Big Message(All Players(All Teams), Custom String("{0} {1} {2}", Event Player, Custom String("클리어! Time", Null, Null, Null), String("{0} sec", (Event Player).D, Null, Null)));
            Destroy Effect(First Of((Event Player).B));
            Destroy Effect(Value In Array((Event Player).B, 1));
            Destroy Effect(Value In Array((Event Player).B, 2));
            Destroy Icon(Value In Array((Event Player).B, 3));
            Destroy In-World Text(Value In Array((Event Player).B, 4));
            Modify Global Variable(F, Append To Array, Event Player);
            Modify Global Variable(G, Append To Array, Event Player);
            "H传送门字符串"
            Set Player Variable(Event Player, H, 2);
        End;
        If(Compare(Global.kz_xs, ==, True));
            Set Player Variable(Event Player, L, 0);
            Chase Player Variable At Rate(Event Player, L, 10, 1, Destination and Rate);
    }
}

rule ("nope") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    action {
        Disable Game Mode HUD(All Players(All Teams));
    }
}

rule ("Killing Sphere | Damage") {
    event {
        Ongoing - Each Player;
        All;
        겐지;
    }
    condition {
        Or(Or(Or(Compare(Value In Array(Global.killballnumber, Index Of Array Value(Global.H, First Of(Filtered Array(Global.H, Compare(Distance Between(Event Player, Current Array Element), <=, Value In Array(Global.I, Index Of Array Value(Global.H, Current Array Element))))))), ==, (Event Player).A), Compare(Value In Array(Global.killballnumber, Index Of Array Value(Global.H, Value In Array(Filtered Array(Global.H, Compare(Distance Between(Event Player, Current Array Element), <=, Value In Array(Global.I, Index Of Array Value(Global.H, Current Array Element)))), 1))), ==, (Event Player).A)), Compare(Value In Array(Global.killballnumber, Index Of Array Value(Global.H, Value In Array(Filtered Array(Global.H, Compare(Distance Between(Event Player, Current Array Element), <=, Value In Array(Global.I, Index Of Array Value(Global.H, Current Array Element)))), 2))), ==, (Event Player).A)), Compare(Value In Array(Global.killballnumber, Index Of Array Value(Global.H, Value In Array(Filtered Array(Global.H, Compare(Distance Between(Event Player, Current Array Element), <=, Value In Array(Global.I, Index Of Array Value(Global.H, Current Array Element)))), 3))), ==, (Event Player).A)) == True;
        (Event Player).A != 0;
        (Event Player).A < Subtract(Count Of(Global.A), 1);
        (Event Player).C == 0;
    }
    action {
        Kill(Event Player, Null);
    }
}

rule ("Bouncing Ball | Properties") {
    event {
        Ongoing - Each Player;
        All;
        겐지;
    }
    condition {
        Value In Array(Global.pinballnumber, Index Of Array Value(Global.TQ, Filtered Array(Global.TQ, Compare(Distance Between(Event Player, Current Array Element), <=, 1.2)))) == (Event Player).A;
        (Event Player).A != 0;
    }
    action {
        Apply Impulse(Event Player, Up, Value In Array(Global.EditMode, Index Of Array Value(Global.TQ, Filtered Array(Global.TQ, Compare(Distance Between(Position Of(Event Player), Current Array Element), <=, 2)))), To World, Cancel Contrary Motion);
        "eventPlayer.setAbility1Enabled(TQ6[TQ.index([player for player in TQ if distance(eventPlayer.getPosition(), player) <= 2])])\r\neventPlayer.setUltEnabled(TQ5[TQ.index([player for player in TQ if distance(eventPlayer.getPosition(), player) <= 2])])"
        If(Compare(Value In Array(Global.TQ6, Index Of Array Value(Global.TQ, Filtered Array(Global.TQ, Compare(Distance Between(Position Of(Event Player), Current Array Element), <=, 2)))), ==, True));
            Set Ability 1 Enabled(Event Player, True);
            Small Message(Event Player, Custom String("Dash is ready", Null, Null, Null));
        End;
        If(Compare(Value In Array(Global.TQ5, Index Of Array Value(Global.TQ, Filtered Array(Global.TQ, Compare(Distance Between(Position Of(Event Player), Current Array Element), <=, 2)))), ==, True));
            Set Ultimate Ability Enabled(Event Player, True);
            Set Ultimate Charge(Event Player, 100);
            Small Message(Event Player, Custom String("Ultimate is ready", Null, Null, Null));
    }
}

rule ("Data for Top 5") {
    event {
        Ongoing - Each Player;
        All;
        겐지;
    }
    condition {
        (Event Player).A == Subtract(Count Of(Global.A), 1);
        (Event Player).E < 1;
    }
    action {
        Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1));
        Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1));
        Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1));
        Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1));
        Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1));
        Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1));
        Modify Global Variable(save, Remove From Array By Value, Custom String("{0}", Event Player, Null, Null));
        If(Compare(Value In Array((Event Player).B, 7), ==, Null));
            Set Player Variable(Event Player, T, (Event Player).D);
            Create HUD Text(If-Then-Else(Array Contains(Global.toplistSortedTimes, Value In Array(Global.toplistTimes, Index Of Array Value(Global.toplistPlayers, Custom String("{0}", Event Player, Null, Null)))), Null, All Players(All Teams)), Hero Icon String(Hero(겐지)), Event Player, Custom String("{0} sec", (Event Player).T, Null, Null), Right, (Event Player).T, Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187, 255), Custom Color(158, 255, 187, 255), Visible To Sort Order String, Default Visibility);
            Set Player Variable At Index(Event Player, B, 7, Last Text ID);
        Else;
            Skip If(Compare((Event Player).D, >, (Event Player).T), 1);
            Set Player Variable(Event Player, T, (Event Player).D);
            //lbl_0:
        End;
        "Save data for the Top 5 list"
        If(Array Contains(Global.toplistPlayers, Custom String("{0}", Event Player, Null, Null)));
            Skip If(Compare((Event Player).D, >=, Value In Array(Global.toplistTimes, Index Of Array Value(Global.toplistPlayers, Custom String("{0}", Event Player, Null, Null)))), 1);
            Set Global Variable At Index(toplistTimes, Index Of Array Value(Global.toplistPlayers, Custom String("{0}", Event Player, Null, Null)), (Event Player).D);
            //lbl_1:
        Else;
            Modify Global Variable(toplistPlayers, Append To Array, Custom String("{0}", Event Player, Null, Null));
            Set Global Variable At Index(toplistTimes, Index Of Array Value(Global.toplistPlayers, Custom String("{0}", Event Player, Null, Null)), (Event Player).D);
        End;
        "Reload the Sorted Array Times"
        Set Global Variable(toplistSortedTimes, Array Slice(Sorted Array(Global.toplistTimes, Current Array Element), 0, 6));
        Stop Chasing Player Variable(Event Player, ztjs);
        Set Player Variable(Event Player, ztjs, 0);
    }
}

rule ("Checkpoint | Finish effects") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        (Event Player).A == Subtract(Count Of(Global.A), 1);
        (Event Player).E < 1;
        Is Moving(Event Player) == True;
    }
    action {
        "@Condition (eventPlayer.isMoving() == true or eventPlayer.isHoldingButton(Button.JUMP) == true) == true"
        Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Position Of(Event Player), 1.6);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Green), Position Of(Event Player), 1.4);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Position Of(Event Player), 1.2);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Position Of(Event Player), 1);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Blue), Position Of(Event Player), 0.8);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Aqua), Position Of(Event Player), 0.6);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Position Of(Event Player), 0.4);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Position Of(Event Player), 0.2);
        Wait(0.35, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Death Teleport") {
    event {
        Player Died;
        All;
        All;
    }
    condition {
        (Event Player).F != 1;
        Count Of(Global.A) >= 2;
    }
    action {
        Clear Status(Event Player, Phased Out);
        Resurrect(Event Player);
        If(Compare(Global.kz_xs, ==, True));
            Set Player Variable(Event Player, L, 0);
            Stop Chasing Player Variable(Event Player, L);
            Set Player Variable(Event Player, A, If-Then-Else(Compare((Event Player).E, >, 0), (Event Player).A, 0));
        End;
        Teleport(Event Player, If-Then-Else(Compare(Count Of(Value In Array(Global.A, (Event Player).A)), !=, 0), Value In Array(Value In Array(Global.A, (Event Player).A), 1), Value In Array(Global.A, (Event Player).A)));
    }
}

rule ("Landing on Checkpoint (In some circumstances turn off?)") {
    event {
        Ongoing - Each Player;
        All;
        겐지;
    }
    condition {
        Distance Between(Event Player, If-Then-Else(Compare(Count Of(Value In Array(Global.A, (Event Player).A)), !=, 0), Value In Array(Value In Array(Global.A, (Event Player).A), 1), Value In Array(Global.A, (Event Player).A))) > 1.4;
        Is On Ground(Event Player) == True;
        (Event Player).A < Subtract(Count Of(Global.A), 1);
        Count Of(Global.A) >= 2;
        (Event Player).C != 1;
        (Event Player).F != 1;
    }
    action {
        "做特定关卡开启落地死亡再打开\r\n@Condition (eventPlayer.A == -1 or eventPlayer.A == -1 or eventPlayer.A == -1 or false) == true"
        If(Compare((Event Player).E, <, 1));
            Set Ability 1 Enabled(Event Player, False);
            Set Ultimate Ability Enabled(Event Player, False);
        End;
        Apply Impulse(Event Player, Down, Speed Of(Event Player), To Player, Cancel Contrary Motion);
        Set Status(Event Player, Null, Rooted, 0.1);
        If(Compare(Global.kz_xs, ==, True));
            Set Player Variable(Event Player, L, 0);
            Stop Chasing Player Variable(Event Player, L);
            Set Player Variable(Event Player, A, If-Then-Else(Compare((Event Player).E, >, 0), (Event Player).A, 0));
        End;
        Teleport(Event Player, If-Then-Else(Compare(Count Of(Value In Array(Global.A, (Event Player).A)), !=, 0), Value In Array(Value In Array(Global.A, (Event Player).A), 1), Value In Array(Global.A, (Event Player).A)));
        If(Compare(Global.deathjump, ==, True));
            Disallow Button(Event Player, Button(Jump));
            Wait(0.1, Ignore Condition);
            Allow Button(Event Player, Button(Jump));
        End;
        If(Compare((Event Player).A, ==, 0));
            Set Player Variable(Event Player, D, 0);
        End;
        If(Is Using Ultimate(Event Player));
            Kill(Event Player, Null);
    }
}

rule ("Player Effect") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Alive(Event Player) == True;
        Has Status(Event Player, Phased Out) == False;
    }
    action {
        Set Status(Event Player, Null, Phased Out, 9999);
        Set Status(Event Player, Null, Invincible, 9999);
    }
}

rule ("Combo | Reset the run | RESTART") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Crouch)) == True;
        Is Button Held(Event Player, Button(Interact)) == True;
        Is Button Held(Event Player, Button(Ability 2)) == True;
    }
    action {
        If(Array Contains(Global.save, Custom String("{0}", Event Player, Null, Null)));
            Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1));
            Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1));
            Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1));
            Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1));
            Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1));
            Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 1));
            Modify Global Variable(save, Remove From Array By Value, Custom String("{0}", Event Player, Null, Null));
        End;
        Modify Global Variable At Index(P, (Event Player).A, Remove From Array By Value, Event Player);
        If(Compare((Event Player).A, >=, Subtract(Count Of(Global.A), 1)));
            Call Subroutine(Sub0);
            "这条动作为“消除玩家通关成绩显示”"
            Destroy HUD Text(Value In Array((Event Player).B, 7));
        End;
        Call Subroutine(Sub1);
        Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 100);
        Modify Global Variable(F, Remove From Array By Value, Event Player);
        Modify Global Variable(G, Remove From Array By Value, Event Player);
    }
}

rule ("Combo | Spectate | Interact") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Interact)) == True;
        (Event Player).E < 1;
    }
    action {
        Wait(1, Abort When False);
        Small Message(Event Player, Custom String("Hold {0}: 관전 취소", Input Binding String(Button(Interact)), Null, Null));
        If(Is Alive(Event Player));
            If(Compare((Event Player).A, <, Subtract(Count Of(Global.A), 1)));
                Chase Player Variable At Rate(Event Player, ztjs, 999999, 1, Destination and Rate);
                Set Global Variable At Index(save, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 2), (Event Player).D);
                Set Global Variable At Index(save, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 4), Total Time Elapsed);
                Set Global Variable At Index(save, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 6), 1);
            End;
            Set Respawn Max Time(Event Player, 9999);
            Set Player Variable(Event Player, F, 1);
            Stop Chasing Player Variable(Event Player, D);
            Wait(0.2, Ignore Condition);
            Kill(Event Player, Null);
            Teleport(Event Player, If-Then-Else(Compare(Count Of(Value In Array(Global.A, (Event Player).A)), !=, 0), Value In Array(Value In Array(Global.A, (Event Player).A), 1), Value In Array(Global.A, (Event Player).A)));
        Else;
            Skip If(Compare((Event Player).E, >=, 1), 2);
            Respawn(Event Player);
            Set Player Variable(Event Player, F, 0);
            //lbl_0:
            Teleport(Event Player, If-Then-Else(Compare(Count Of(Value In Array(Global.A, (Event Player).A)), !=, 0), Value In Array(Value In Array(Global.A, (Event Player).A), 1), Value In Array(Global.A, (Event Player).A)));
            Skip If(Compare((Event Player).A, >=, Subtract(Count Of(Global.A), 1)), 3);
            Set Ultimate Ability Enabled(Event Player, False);
            Set Ability 1 Enabled(Event Player, False);
            Chase Player Variable At Rate(Event Player, D, 10000, 1, Destination and Rate);
            //lbl_1:
            Set Respawn Max Time(Event Player, 0);
            Set Player Variable(Event Player, C, 0);
            If(Compare((Event Player).A, <, Subtract(Count Of(Global.A), 1)));
                Stop Chasing Player Variable(Event Player, ztjs);
                Set Global Variable At Index(save, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 5), (Event Player).ztjs);
                Set Player Variable(Event Player, ztjs, 0);
                Set Global Variable At Index(save, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 6), 0);
            End;
        End;
        Skip If(Compare(Global.kz_xs, ==, False), 1);
        Set Player Variable(Event Player, A, 0);
        //lbl_2:
    }
}

rule ("Initialization | Double jump | Bhop") {
    event {
        Ongoing - Each Player;
        All;
        겐지;
    }
    condition {
        Is On Ground(Event Player) == True;
    }
    action {
        "变量A后的数字“-1”为关卡数，具体操作参考“给刀”。此条规则开启效果为“特定关卡开启三段”，关闭则为“所有关卡封禁三段”\r\n@Condition (eventPlayer.A != -1 or eventPlayer.A != -1 or false) == true\r\n注释一定要看！此条条件开启的效果为“通关后自动开启三段”，关闭则通关后仍封禁三段\r\n@Condition eventPlayer.A < len(A) - 1"
        Set Player Variable(Event Player, TY, 0);
        Set Player Variable(Event Player, J, 2);
        Wait(0, Ignore Condition);
        Loop If(And(Or(Compare((Event Player).TY, !=, 0), Compare((Event Player).J, !=, 2)), Is On Ground(Event Player)));
        Set Player Variable(Event Player, O, 1);
    }
}

rule ("二段跳，小跳初始化") {
    event {
        Ongoing - Each Player;
        All;
        겐지;
    }
    condition {
        Is On Ground(Event Player) == True;
    }
    action {
        "变量A后的数字“-1”为关卡数，具体操作参考“给刀”。此条规则开启效果为“特定关卡开启三段”，关闭则为“所有关卡封禁三段”\r\n@Condition (eventPlayer.A != -1 or eventPlayer.A != -1 or false) == true\r\n注释一定要看！此条条件开启的效果为“通关后自动开启三段”，关闭则通关后仍封禁三段\r\n@Condition eventPlayer.A < len(A) - 1"
        Set Player Variable(Event Player, TY, 0);
        Set Player Variable(Event Player, J, 2);
        Set Player Variable(Event Player, climbNum, 0);
        Wait(0, Ignore Condition);
        Loop If(And(Or(Compare((Event Player).TY, !=, 0), Compare((Event Player).J, !=, 2)), Is On Ground(Event Player)));
        Set Player Variable(Event Player, O, 1);
    }
}

rule ("Checking | Jump") {
    event {
        Ongoing - Each Player;
        All;
        겐지;
    }
    condition {
        Is Button Held(Event Player, Button(Jump)) == True;
        (Event Player).TY != 2;
    }
    action {
        "变量A后的数字“-1”为关卡数，具体操作参考“给刀”。此条规则开启效果为“特定关卡开启三段”，关闭则为“所有关卡封禁三段\r\n@Condition (eventPlayer.A != -1 or eventPlayer.A != -1 or false) == true\r\n注释一定要看！此条条件开启的效果为“通关后自动开启三段”，关闭则通关后仍封禁三\r\n@Condition eventPlayer.A < len(A) - 1"
        Modify Player Variable(Event Player, TY, Add, 1);
    }
}

rule ("Checking | Bhop in the air") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        (Event Player).TY == 0;
        Is In Air(Event Player) == True;
        Is Button Held(Event Player, Button(Jump)) == False;
    }
    action {
        Set Player Variable(Event Player, O, 0);
    }
}

rule ("Checking | In the air") {
    event {
        Ongoing - Each Player;
        All;
        겐지;
    }
    condition {
        (Event Player).TY == 0;
        Is In Air(Event Player) == True;
    }
    action {
        "变量A后的数字“-1”为关卡数，具体操作参考“给刀”。此条规则开启效果为“特定关卡开启三段”，关闭则为“所有关卡封禁三段\r\n@Condition (eventPlayer.A != -1 or eventPlayer.A != -1 or false) == true\r\n注释一定要看！此条条件开启的效果为“通关后自动开启三段”，关闭则通关后仍封禁三\r\n@Condition eventPlayer.A < len(A) - 1"
        Set Player Variable(Event Player, TY, 1);
    }
}

rule ("Checking | Triple jump") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        (Event Player).TY == 1;
    }
    action {
        Wait(0.1, Abort When False);
        Set Player Variable(Event Player, TY, 2);
    }
}

rule ("Checking | Player on the wall") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        "此条规则同时与爬墙判定挂钩，请勿关闭/删除"
        Is On Wall(Event Player) == True;
        Is Button Held(Event Player, Button(Jump)) == True;
    }
    action {
        Set Player Variable(Event Player, TY, 2);
        Set Player Variable(Event Player, J, 1);
    }
}

rule ("Combo | Invincible/Normal mode") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Melee)) == True;
        Is Button Held(Event Player, Button(Reload)) == True;
        Is Using Ability 1(Event Player) == False;
        (Event Player).A < Subtract(Count Of(Global.A), 1);
        Is Alive(Event Player) == True;
        Is Using Ultimate(Event Player) == False;
    }
    action {
        Start Forcing Player Position(Event Player, If-Then-Else(Compare(Count Of(Value In Array(Global.A, (Event Player).A)), !=, 0), Value In Array(Value In Array(Global.A, (Event Player).A), 1), Value In Array(Global.A, (Event Player).A)), True);
        If(Compare((Event Player).C, ==, 0));
            Chase Player Variable At Rate(Event Player, ztjs, 999999, 1, Destination and Rate);
            Set Global Variable At Index(save, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 2), (Event Player).D);
            Set Global Variable At Index(save, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 4), Total Time Elapsed);
            Set Global Variable At Index(save, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 6), 1);
            Skip If(Compare(Global.kz_xs, ==, False), 2);
            Small Message(Event Player, Custom String("{0}+LMB/RMB: 다음/이전", Input Binding String(Button(Crouch)), Null, Null));
            Stop Chasing Player Variable(Event Player, L);
            //lbl_0:
            Stop Chasing Player Variable(Event Player, D);
            Big Message(Event Player, Custom String("연습모드", Null, Null, Null));
            Stop Forcing Player Position(Event Player);
            Set Ultimate Ability Enabled(Event Player, True);
            Set Ultimate Charge(Event Player, 100);
            Set Ability 1 Enabled(Event Player, True);
            Wait(0.2, Ignore Condition);
            Set Player Variable(Event Player, C, 1);
        Else;
            Skip If(Compare((Event Player).E, >=, 1), 2);
            Set Ultimate Ability Enabled(Event Player, False);
            Set Ability 1 Enabled(Event Player, False);
            //lbl_1:
            Skip If(Compare(Global.kz_xs, ==, False), 1);
            Set Player Variable(Event Player, A, 0);
            //lbl_2:
            Teleport(Event Player, If-Then-Else(Compare(Count Of(Value In Array(Global.A, (Event Player).A)), !=, 0), Value In Array(Value In Array(Global.A, (Event Player).A), 1), Value In Array(Global.A, (Event Player).A)));
            Wait(0.1, Ignore Condition);
            Set Player Variable(Event Player, C, 0);
            Big Message(Event Player, Custom String("일반 모드", Null, Null, Null));
            Chase Player Variable At Rate(Event Player, D, 9999999, 1, Destination and Rate);
            Stop Forcing Player Position(Event Player);
            Stop Chasing Player Variable(Event Player, ztjs);
            Set Global Variable At Index(save, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 5), (Event Player).ztjs);
            Set Player Variable(Event Player, ztjs, 0);
            Set Global Variable At Index(save, Add(Index Of Array Value(Global.save, Custom String("{0}", Event Player, Null, Null)), 6), 0);
    }
}

rule ("Ultimate charge") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Ultimate Charge Percent(Event Player) < 100;
    }
    action {
        Set Ultimate Charge(Event Player, 100);
    }
}

rule ("Checking | Using Emote") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Communicating Any Emote(Event Player) == True;
    }
    action {
        Set Player Variable(Event Player, O, 0);
    }
}

rule ("Checking | Bhop") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        (Event Player).O == 0;
        Is Jumping(Event Player) == True;
    }
    action {
        Set Player Variable(Event Player, O, 1);
        Small Message(Event Player, Custom String("콩콩이", Null, Null, Null));
    }
}

rule ("Player left the game") {
    event {
        Player Left Match;
        All;
        All;
    }
    action {
        Modify Global Variable(Q, Remove From Array By Value, Event Player);
        If(Compare(Value In Array(Global.save, Subtract(Index Of Array Value(Global.save, Event Player), 2)), ==, 0));
            Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Event Player), 1));
            Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Event Player), 1));
            Modify Global Variable(save, Remove From Array By Index, Add(Index Of Array Value(Global.save, Event Player), 1));
            Modify Global Variable(save, Remove From Array By Index, Subtract(Index Of Array Value(Global.save, Event Player), 1));
            Modify Global Variable(save, Remove From Array By Index, Subtract(Index Of Array Value(Global.save, Event Player), 1));
            Modify Global Variable(save, Remove From Array By Index, Subtract(Index Of Array Value(Global.save, Event Player), 1));
            Modify Global Variable(save, Remove From Array By Value, Event Player);
        Else;
            Skip If(Compare(Value In Array(Global.save, Subtract(Index Of Array Value(Global.save, Event Player), 2)), >=, Subtract(Count Of(Global.A), 1)), 2);
            Skip If(Compare(Value In Array(Global.save, Add(Index Of Array Value(Global.save, Event Player), 3)), ==, 1), 1);
            Set Global Variable At Index(save, Subtract(Index Of Array Value(Global.save, Event Player), 1), Add(Subtract(Subtract(Total Time Elapsed, Value In Array(Global.save, Add(Index Of Array Value(Global.save, Event Player), 1))), Value In Array(Global.save, Add(Index Of Array Value(Global.save, Event Player), 2))), Value In Array(Global.save, Subtract(Index Of Array Value(Global.save, Event Player), 1))));
            //lbl_0:
            //lbl_1:
            Set Global Variable At Index(save, Add(Index Of Array Value(Global.save, Event Player), 2), 0);
            Set Global Variable At Index(save, Add(Index Of Array Value(Global.save, Event Player), 3), 0);
    }
}

rule ("Create Bhop Climb HUD Text") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Has Spawned(Event Player) == True;
    }
    action {
        Wait(1, Ignore Condition);
        Create HUD Text(Event Player, Custom String("콩콩이", Null, Null, Null), Null, Null, Left, 1, If-Then-Else(Compare((Event Player).O, ==, 0), Color(Green), (Event Player).CH), Null, Null, Color, Default Visibility);
    }
}

rule ("爬墙未用HUD___Counter") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        (Event Player).J == 2;
        Has Spawned(Event Player) == True;
    }
    action {
        Destroy HUD Text((Event Player).paqiang);
        Create HUD Text(Event Player, Custom String("벽타기{0}", If-Then-Else(Compare((Event Player).climbNum, >, 0), Custom String("({0})", (Event Player).climbNum, Null, Null), Custom String("", Null, Null, Null)), Null, Null), Null, Null, Left, 2, Color(Green), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, paqiang, Last Text ID);
    }
}

rule ("爬墙已用HUD___Counter") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        (Event Player).J == 1;
        Has Spawned(Event Player) == True;
    }
    action {
        Destroy HUD Text((Event Player).paqiang);
        Create HUD Text(Event Player, Custom String("벽타기", Null, Null, Null), Null, Null, Left, 2, Color(Red), Null, Null, Visible To and String, Default Visibility);
        Set Player Variable(Event Player, paqiang, Last Text ID);
        If(Compare((Event Player).HUB_DOTS_INDEX, ==, 2));
            Small Message(Event Player, Custom String("벽타기 ", Null, Null, Null));
    }
}

rule ("爬墙计数") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is On Wall(Event Player) == True;
        Is Button Held(Event Player, Button(Jump)) == False;
        (Event Player).J == 2;
        (Event Player).C == 0;
    }
    action {
        Modify Player Variable(Event Player, climbNum, Add, 1);
    }
}

rule ("Bhop Green") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is On Ground(Event Player) == True;
        Is Button Held(Event Player, Button(Jump)) == False;
    }
    action {
        Set Player Variable(Event Player, CH, Color(Green));
    }
}

rule ("Bhop Red") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Jumping(Event Player) == True;
    }
    action {
        Set Player Variable(Event Player, CH, Color(Red));
    }
}

rule ("Checking | Double bhop | thank for Githuboy#5249") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is On Wall(Event Player) == False;
        Is Button Held(Event Player, Button(Crouch)) == True;
        Is Button Held(Event Player, Button(Jump)) == False;
        Is On Ground(Event Player) == False;
        Is In Air(Event Player) == True;
        Is Jumping(Event Player) == False;
        Is Crouching(Event Player) == True;
    }
    action {
        Small Message(Event Player, Custom String("앉콩", Null, Null, Null));
        Set Player Variable(Event Player, O, 0);
        If(Compare(Global.kaxiaotiao, ==, True));
            Kill(Event Player, Null);
            Small Message(Event Player, Custom String("{0} {1}", Hero Icon String(Hero(겐지)), Custom String(": 앉콩 금지됨", Null, Null, Null), Null));
    }
}

rule ("Combo | Quick Reset") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Button Held(Event Player, Button(Reload)) == True;
        (Event Player).E < 1;
    }
    action {
        Abort If(Is Button Held(Event Player, Button(Melee)));
        If(Compare((Event Player).quick_restart, ==, True));
            Start Forcing Player Position(Event Player, If-Then-Else(Compare(Count Of(Value In Array(Global.A, (Event Player).A)), !=, 0), Value In Array(Value In Array(Global.A, (Event Player).A), 1), Value In Array(Global.A, (Event Player).A)), True);
            Skip If(Or(Compare((Event Player).E, >=, 1), Compare((Event Player).C, ==, 1)), 2);
            Set Ultimate Ability Enabled(Event Player, False);
            Set Ability 1 Enabled(Event Player, False);
            //lbl_0:
            Teleport(Event Player, If-Then-Else(Compare(Count Of(Value In Array(Global.A, (Event Player).A)), !=, 0), Value In Array(Value In Array(Global.A, (Event Player).A), 1), Value In Array(Global.A, (Event Player).A)));
            Wait(0.1, Ignore Condition);
            Stop Forcing Player Position(Event Player);
        End;
        Wait(1, Abort When False);
        If(Compare((Event Player).quick_restart, ==, False));
            Set Player Variable(Event Player, quick_restart, True);
            Big Message(Event Player, Custom String("제자리 활성화", Null, Null, Null));
            Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 100);
        Else If(Compare((Event Player).quick_restart, ==, True));
            Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 100);
            Set Player Variable(Event Player, quick_restart, False);
            Big Message(Event Player, Custom String("제자리 비활성화", Null, Null, Null));
    }
}

rule ("Limit Ultimate") {
    event {
        Ongoing - Each Player;
        All;
        겐지;
    }
    condition {
        "此条规则作用为：在跑图时令SHIFT只能使用一次"
        Is Using Ultimate(Event Player) == True;
        (Event Player).A < Subtract(Count Of(Global.A), 1);
        (Event Player).E < 1;
        (Event Player).C == 0;
    }
    action {
        Set Ultimate Ability Enabled(Event Player, False);
    }
}

rule ("Lmit Dash") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        "此条规则作用为：在跑图时令SHIFT只能使用一次"
        Is Using Ability 1(Event Player) == True;
        (Event Player).A < Subtract(Count Of(Global.A), 1);
        (Event Player).E < 1;
        (Event Player).C == 0;
    }
    action {
        Set Ability 1 Enabled(Event Player, False);
    }
}

rule ("Give Blade") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is On Ground(Event Player) == True;
        (Event Player).A < Subtract(Count Of(Global.A), 1);
        Distance Between(Event Player, If-Then-Else(Compare(Count Of(Value In Array(Global.A, (Event Player).A)), >, 1), Last Of(Value In Array(Global.A, (Event Player).A)), Value In Array(Global.A, (Event Player).A))) <= 1.4;
        Array Contains(Global.Dao, (Event Player).A) == True;
        Is Using Ultimate(Event Player) == False;
    }
    action {
        Wait(0.1, Ignore Condition);
        Abort If(Is Using Ultimate(Event Player));
        Set Ultimate Ability Enabled(Event Player, True);
        Set Ultimate Charge(Event Player, 100);
        Small Message(Event Player, Custom String("궁극기 활성화", Null, Null, Null));
    }
}

rule ("Give Dash") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is On Ground(Event Player) == True;
        (Event Player).A < Subtract(Count Of(Global.A), 1);
        "@Condition distance(eventPlayer, A[eventPlayer.A]) <= 1.4"
        Distance Between(Event Player, If-Then-Else(Compare(Count Of(Value In Array(Global.A, (Event Player).A)), >, 1), Last Of(Value In Array(Global.A, (Event Player).A)), Value In Array(Global.A, (Event Player).A))) <= 1.4;
        Array Contains(Global.SHIFT, (Event Player).A) == True;
        Is Using Ability 1(Event Player) == False;
    }
    action {
        Set Ability 1 Enabled(Event Player, True);
        Small Message(Event Player, Custom String("질풍참 활성화", Null, Null, Null));
    }
}

rule ("-------------------------------------------Addons-------------------------------------------------------") {
    event {
        Ongoing - Global;
    }
}

rule ("Text <------------------------------------------------- 워크샵 코드와 제작자를 입력해주세요!") {
    event {
        Ongoing - Global;
    }
    action {
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("For more maps and records join:", Null, Null, Null), Left, -14, Null, Null, Color(Purple), Visible To, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("dsc.gg/genjiparkour\r\n한국 디스코드: dsc.gg/dyGvBbBgxV", Null, Null, Null), Left, -13, Null, Null, Color(Purple), Visible To, Default Visibility);
        Create HUD Text(All Players(All Teams), Custom String("", Null, Null, Null), Null, Custom String("{0}\r\n{1}", Custom String("MADE BY: <제작자>", Null, Null, Null), Custom String("CODE: <코드>", Null, Null, Null), Null), Left, -15, Color(White), Color(Sky Blue), Color(Sky Blue), Visible To and String, Default Visibility);
    }
}

rule ("Friend Title - Displaying your message (on you)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Has Spawned(Event Player) == True;
    }
    action {
        "In the field custom string your nickname"
        If(Compare(Custom String("your nickname <-------", Null, Null, Null), ==, Custom String("{0}", Event Player, Null, Null)));
            Big Message(All Players(All Teams), Custom String("Message to the whole room", Null, Null, Null));
            Create In-World Text(All Players(All Teams), Custom String("Title <---------------The inscription that will be displayed on you", Null, Null, Null), Event Player, 1.5, Clip Against Surfaces, Visible To Position and String, Color(Orange), Default Visibility);
        End;
        "空白处填写您好友的名字"
        If(Compare(Custom String("your nickname <-------", Null, Null, Null), ==, Custom String("{0}", Event Player, Null, Null)));
            Big Message(All Players(All Teams), Custom String("Message to the whole room", Null, Null, Null));
            Create In-World Text(All Players(All Teams), Custom String("Title <---------------The inscription that will be displayed on you", Null, Null, Null), Event Player, 1.5, Clip Against Surfaces, Visible To Position and String, Color(Orange), Default Visibility);
    }
}

rule ("-------------------------------Workshop settings-------------------------") {
    event {
        Ongoing - Global;
    }
}

rule ("Ban | Triple Jump") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Vertical Speed Of(Event Player) >= 5.8;
        (Event Player).TY == 1;
        Is Using Ability 1(Event Player) == False;
        Workshop Setting Toggle(Custom String("금지", Null, Null, Null), Custom String("삼단점프", Null, Null, Null), False, 0) == True;
    }
    action {
        Abort If(Is On Wall(Event Player));
        Apply Impulse(Event Player, Down, Speed Of(Event Player), To Player, Cancel Contrary Motion);
    }
}

rule ("Ban | Multiclimb") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is On Wall(Event Player) == True;
        Is Button Held(Event Player, Button(Jump)) == False;
        (Event Player).J == 2;
        Workshop Setting Toggle(Custom String("금지", Null, Null, Null), Custom String("벽캔", Null, Null, Null), False, 1) == True;
    }
    action {
        Apply Impulse(Event Player, Down, Speed Of(Event Player), To Player, Cancel Contrary Motion);
        Small Message(Event Player, Custom String("{0} {1}", Hero Icon String(Hero(겐지)), Custom String(": 벽캔 금지됨", Null, Null, Null), Null));
    }
}

rule ("Ban | Double Bhop") {
    event {
        Ongoing - Global;
    }
    condition {
        Workshop Setting Toggle(Custom String("금지", Null, Null, Null), Custom String("앉콩", Null, Null, Null), False, 2) == True;
    }
    action {
        Set Global Variable(kaxiaotiao, True);
    }
}

rule ("Ban | Emote") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is Communicating Any Emote(Event Player) == True;
        (Event Player).A < Subtract(Count Of(Global.A), 1);
        Workshop Setting Toggle(Custom String("금지", Null, Null, Null), Custom String("감정표현", Null, Null, Null), False, 3) == True;
    }
    action {
        Kill(Event Player, Null);
        Small Message(Event Player, Custom String("{0} {1}", Hero Icon String(Hero(겐지)), Custom String(": 감정표현 금지됨", Null, Null, Null), Null));
    }
}

rule ("Ban | Bhop from Reset") {
    event {
        Ongoing - Global;
    }
    condition {
        Workshop Setting Toggle(Custom String("금지", Null, Null, Null), Custom String("제자리 콩콩이", Null, Null, Null), False, 4) == True;
    }
    action {
        Set Global Variable(deathjump, True);
    }
}

rule ("Extended function | Strengthen stall (家里有妖怪#5202 | Easier to stall | Jump farther)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Has Spawned(Event Player) == True;
        Vertical Speed Of(Event Player) >= -0.2;
        Vertical Speed Of(Event Player) <= 0.05;
        Horizontal Speed Of(Event Player) <= 1.3;
        Is In Air(Event Player) == True;
        Is On Wall(Event Player) == False;
        Is On Ground(Event Player) == False;
        "자점 강화 및 도움?"
        Workshop Setting Toggle(Custom String("확장 기능", Null, Null, Null), Custom String("지연 강화", Null, Null, Null), False, 0) == True;
    }
    action {
        Wait(0.25, Abort When False);
        Start Forcing Player Position(Event Player, Position Of(Event Player), False);
        Wait Until(Not(Is Moving(Event Player)), 10);
        Stop Forcing Player Position(Event Player);
        Set Move Speed(Event Player, 0);
        Set Gravity(Event Player, 0);
        Wait(3, Ignore Condition);
        Set Gravity(Event Player, 100);
        Set Move Speed(Event Player, 100);
        Apply Impulse(Event Player, Up, 10, To World, Cancel Contrary Motion);
        Loop If Condition Is True;
    }
}

rule ("Extended function | Climb the wall to refresh double jump(喵喵酱#51379 | Touch and Multi will not trigger)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Is On Wall(Event Player) == True;
        Workshop Setting Toggle(Custom String("확장 기능", Null, Null, Null), Custom String("벽타기 후 이단점프 초기화", Null, Null, Null), False, 1) == True;
    }
    action {
        Wait(0.25, Abort When False);
        Wait Until(Not(Is On Wall(Event Player)), 1);
        Set Status(Event Player, Null, Hacked, 0.1);
        Wait(0.1, Ignore Condition);
        Clear Status(Event Player, Hacked);
    }
}

rule ("Extended function | Save climb into the checkpoint(TITANXPASCAL#5554 *Remember to create text to prompt players)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Distance Between(Event Player, Value In Array(Global.A, Add((Event Player).A, 1))) <= 2;
        Workshop Setting Toggle(Custom String("확장 기능", Null, Null, Null), Custom String("Save climb into the checkpoint", Null, Null, Null), False, 2) == True;
        "Change \"-1\" to certain Checkpoints' number"
        Array Contains(Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (Event Player).A) == True;
    }
    action {
        "If all checkpoints need this function, enable this rule and disable Rule: \"Array Contains\" \r\n@Condition eventPlayer.A < len(A) - 1"
        If(Compare((Event Player).J, ==, 1));
            Kill(Event Player, Null);
            Small Message(Event Player, Custom String("Fail to meet clear condition: Save climb", Null, Null, Null));
    }
}

rule ("Extended function | Save Bhop into the checkpoint(TITANXPASCAL#5554 *Remember to create text to prompt players)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Distance Between(Event Player, Value In Array(Global.A, Add((Event Player).A, 1))) <= 2;
        Workshop Setting Toggle(Custom String("확장 기능", Null, Null, Null), Custom String("Save Bhop into the checkpoint", Null, Null, Null), False, 3) == True;
        "Change \"-1\" to certain Checkpoints' number"
        Array Contains(Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), (Event Player).A) == True;
    }
    action {
        "If all checkpoints need this function, enable this rule and disable Rule: \"Array Contains\" \r\n@Condition eventPlayer.A < len(A) - 1"
        If(Compare((Event Player).O, ==, 1));
            Kill(Event Player, Null);
            Small Message(Event Player, Custom String("Fail to meet clear condition: Save bhop", Null, Null, Null));
    }
}

rule ("rule 91") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Distance Between(Event Player, Value In Array(Global.A, If-Then-Else(Compare((Event Player).E, >, 0), (Event Player).A, 0))) > 1.4;
        Global.kz_xs == True;
        If-Then-Else(Compare((Event Player).E, >, 0), 0, (Event Player).C) != 1;
        If-Then-Else(Compare((Event Player).E, >, 0), 0, (Event Player).A) == 0;
    }
    action {
        "@Condition eventPlayer.A == 0\r\n@Condition eventPlayer.C != 1"
        Set Player Variable(Event Player, L, 0);
        Chase Player Variable At Rate(Event Player, L, 10, 1, Destination and Rate);
        Set Player Variable(Event Player, D, 0);
    }
}

rule ("rule 92") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Global.kz_xs == True;
        (Event Player).L >= 5;
        (Event Player).A < Subtract(Count Of(Global.A), 1);
    }
    action {
        Set Player Variable(Event Player, A, If-Then-Else(Compare((Event Player).E, >, 0), (Event Player).A, 0));
        Skip If(Compare((Event Player).C, ==, 1), 2);
        Skip If(And(Compare((Event Player).E, >, 0), Is On Ground(Event Player)), 2);
        Teleport(Event Player, Value In Array(Global.A, If-Then-Else(Compare((Event Player).E, <, 1), 0, (Event Player).A)));
        //lbl_0:
        Small Message(Event Player, Custom String("Time out!", Null, Null, Null));
        //lbl_1:
        Stop Chasing Player Variable(Event Player, L);
    }
}

rule ("rule 93") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        Distance Between(Event Player, First Of(Global.A)) < 1;
        (Event Player).A == 0;
        Global.kz_xs == True;
    }
    action {
        Stop Chasing Player Variable(Event Player, L);
        Set Player Variable(Event Player, L, 0);
        Set Player Variable(Event Player, D, 0);
    }
}

rule ("rule 94") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        (Event Player).C == 1;
        Is Button Held(Event Player, Button(Crouch)) == True;
        Global.kz_xs == True;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
    }
    action {
        Modify Player Variable(Event Player, A, Add, If-Then-Else(Compare((Event Player).A, <, Subtract(Count Of(Global.A), 2)), 1, 0));
        Teleport(Event Player, Value In Array(Global.A, (Event Player).A));
    }
}

rule ("rule 95") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    condition {
        (Event Player).C == 1;
        Is Button Held(Event Player, Button(Crouch)) == True;
        Global.kz_xs == True;
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
    }
    action {
        Modify Player Variable(Event Player, A, Subtract, If-Then-Else(Compare((Event Player).A, >, 0), 1, 0));
        Teleport(Event Player, Value In Array(Global.A, (Event Player).A));
    }
}

